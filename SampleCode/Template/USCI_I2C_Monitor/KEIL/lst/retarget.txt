; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\retarget.crf ..\..\..\..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;622     */
;;;623    char GetChar(void)
000000  4803              LDR      r0,|L1.16|
                  |L1.2|
;;;624    {
;;;625    #ifdef DEBUG_ENABLE_SEMIHOST
;;;626    # if defined (__CC_ARM)
;;;627        int nRet;
;;;628    
;;;629        while (SH_DoCommand(0x101, 0, &nRet) != 0)
;;;630        {
;;;631            if (nRet != 0)
;;;632            {
;;;633                SH_DoCommand(0x07, 0, &nRet);
;;;634                return (char)nRet;
;;;635            }
;;;636        }
;;;637    
;;;638    # else
;;;639        int nRet;
;;;640    
;;;641        while (SH_DoCommand(0x7, 0, &nRet) != 0)
;;;642        {
;;;643            if (nRet != 0)
;;;644                return (char)nRet;
;;;645        }
;;;646    
;;;647    # endif
;;;648        return (0);
;;;649    #else
;;;650    
;;;651        while (1)
;;;652        {
;;;653            if ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0U)
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L1.2|
;;;654            {
;;;655                return (DEBUG_PORT->DAT);
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;656            }
;;;657        }
;;;658    
;;;659    #endif
;;;660    }
00000c  4770              BX       lr
;;;661    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40050000

                          AREA ||i.Hard_Fault_Handler||, CODE, READONLY, ALIGN=2

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;84      */
;;;85     void Hard_Fault_Handler(uint32_t stack[])
000000  4604              MOV      r4,r0
;;;86     {
;;;87         printf("In Hard Fault Handler\n");
000002  a003              ADR      r0,|L2.16|
000004  f7fffffe          BL       __2printf
;;;88     
;;;89         stackDump(stack);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       stackDump
                  |L2.14|
;;;90     
;;;91         // Replace while(1) with chip reset if WDT is not enabled for end product
;;;92         while (1);
00000e  e7fe              B        |L2.14|
;;;93     
;;;94         //SYS->IPRSTC1 = SYS_IPRSTC1_CHIP_RST_Msk;
;;;95     }
;;;96     
                          ENDP

                  |L2.16|
000010  496e2048          DCB      "In Hard Fault Handler\n",0
000014  61726420
000018  4661756c
00001c  74204861
000020  6e646c65
000024  720a00  
000027  00                DCB      0

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;687    
;;;688    int IsDebugFifoEmpty(void)
000000  4802              LDR      r0,|L3.12|
;;;689    {
;;;690        return ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) != 0U);
000002  6980              LDR      r0,[r0,#0x18]
000004  00c0              LSLS     r0,r0,#3
000006  0fc0              LSRS     r0,r0,#31
;;;691    }
000008  4770              BX       lr
;;;692    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=1

                  SendChar PROC
;;;575     */
;;;576    void SendChar(int ch)
000000  b500              PUSH     {lr}
;;;577    {
;;;578    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;579        g_buf[g_buf_len++] = ch;
;;;580        g_buf[g_buf_len] = '\0';
;;;581    
;;;582        if (g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;583        {
;;;584            /* Send the char */
;;;585            if (SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;586            {
;;;587                g_buf_len = 0;
;;;588                return;
;;;589            }
;;;590            else
;;;591            {
;;;592                int i;
;;;593    
;;;594                for (i = 0; i < g_buf_len; i++)
;;;595                    SendChar_ToUART(g_buf[i]);
;;;596    
;;;597                g_buf_len = 0;
;;;598            }
;;;599        }
;;;600    
;;;601    #else
;;;602    
;;;603    #if defined ( __GNUC__ )
;;;604        char ch0;
;;;605        ch0 = (char)ch;
;;;606        _write(0, &ch0, 1);
;;;607    #else
;;;608        SendChar_ToUART(ch);
000002  f7fffffe          BL       SendChar_ToUART
;;;609    #endif /* ( __GNUC__ ) */
;;;610    
;;;611    #endif
;;;612    }
000006  bd00              POP      {pc}
;;;613    
                          ENDP


                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;489    #ifndef NONBLOCK_PRINTF
;;;490    void SendChar_ToUART(int ch)
000000  4906              LDR      r1,|L5.28|
                  |L5.2|
;;;491    {
;;;492    
;;;493        while (DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L5.2|
;;;494    
;;;495        DEBUG_PORT->DAT = ch;
000008  6008              STR      r0,[r1,#0]
;;;496    
;;;497        if (ch == '\n')
00000a  280a              CMP      r0,#0xa
00000c  d104              BNE      |L5.24|
                  |L5.14|
;;;498        {
;;;499            while (DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
00000e  6988              LDR      r0,[r1,#0x18]
000010  0200              LSLS     r0,r0,#8
000012  d4fc              BMI      |L5.14|
;;;500    
;;;501            DEBUG_PORT->DAT = '\r';
000014  200d              MOVS     r0,#0xd
000016  6008              STR      r0,[r1,#0]
                  |L5.24|
;;;502        }
;;;503    }
000018  4770              BX       lr
;;;504    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;702    
;;;703    void _ttywrch(int ch)
000000  b500              PUSH     {lr}
000002  f7fffffe          BL       SendChar_ToUART
;;;704    {
;;;705        SendChar(ch);
;;;706        return;
;;;707    }
000006  bd00              POP      {pc}
;;;708    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;805    
;;;806    int ferror(FILE *stream)
000000  2000              MOVS     r0,#0
;;;807    {
;;;808        return EOF;
000002  43c0              MVNS     r0,r0
;;;809    }
000004  4770              BX       lr
;;;810    #endif
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;785    
;;;786    int fgetc(FILE *stream)
000000  b500              PUSH     {lr}
;;;787    {
;;;788        return (GetChar());
000002  f7fffffe          BL       GetChar
;;;789    }
000006  bd00              POP      {pc}
;;;790    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;727    
;;;728    int fputc(int ch, FILE *stream)
000000  b500              PUSH     {lr}
;;;729    {
000002  4603              MOV      r3,r0
000004  f7fffffe          BL       SendChar_ToUART
;;;730        (void) stream;
;;;731        SendChar(ch);
;;;732        return ch;
000008  4618              MOV      r0,r3
;;;733    }
00000a  bd00              POP      {pc}
;;;734    
                          ENDP


                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;672    
;;;673    int kbhit(void)
000000  4802              LDR      r0,|L10.12|
;;;674    {
;;;675        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0U);
000002  6980              LDR      r0,[r0,#0x18]
000004  0440              LSLS     r0,r0,#17
000006  0fc0              LSRS     r0,r0,#31
;;;676    }
000008  4770              BX       lr
;;;677    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40050000

                          AREA ||i.stackDump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  stackDump PROC
;;;66      */
;;;67     static void stackDump(uint32_t stack[])
000000  b510              PUSH     {r4,lr}
;;;68     {
000002  4604              MOV      r4,r0
;;;69         printf("r0  = 0x%lx\n", stack[r0]);
000004  6801              LDR      r1,[r0,#0]
000006  a010              ADR      r0,|L11.72|
000008  f7fffffe          BL       __2printf
;;;70         printf("r1  = 0x%lx\n", stack[r1]);
00000c  a012              ADR      r0,|L11.88|
00000e  6861              LDR      r1,[r4,#4]
000010  f7fffffe          BL       __2printf
;;;71         printf("r2  = 0x%lx\n", stack[r2]);
000014  a014              ADR      r0,|L11.104|
000016  68a1              LDR      r1,[r4,#8]
000018  f7fffffe          BL       __2printf
;;;72         printf("r3  = 0x%lx\n", stack[r3]);
00001c  a016              ADR      r0,|L11.120|
00001e  68e1              LDR      r1,[r4,#0xc]
000020  f7fffffe          BL       __2printf
;;;73         printf("r12 = 0x%lx\n", stack[r12]);
000024  a018              ADR      r0,|L11.136|
000026  6921              LDR      r1,[r4,#0x10]
000028  f7fffffe          BL       __2printf
;;;74         printf("lr  = 0x%lx\n", stack[lr]);
00002c  a01a              ADR      r0,|L11.152|
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       __2printf
;;;75         printf("pc  = 0x%lx\n", stack[pc]);
000034  a01c              ADR      r0,|L11.168|
000036  69a1              LDR      r1,[r4,#0x18]
000038  f7fffffe          BL       __2printf
;;;76         printf("psr = 0x%lx\n", stack[psr]);
00003c  a01e              ADR      r0,|L11.184|
00003e  69e1              LDR      r1,[r4,#0x1c]
000040  f7fffffe          BL       __2printf
;;;77     }
000044  bd10              POP      {r4,pc}
;;;78     
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
000048  72302020          DCB      "r0  = 0x%lx\n",0
00004c  3d203078
000050  256c780a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L11.88|
000058  72312020          DCB      "r1  = 0x%lx\n",0
00005c  3d203078
000060  256c780a
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L11.104|
000068  72322020          DCB      "r2  = 0x%lx\n",0
00006c  3d203078
000070  256c780a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L11.120|
000078  72332020          DCB      "r3  = 0x%lx\n",0
00007c  3d203078
000080  256c780a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L11.136|
000088  72313220          DCB      "r12 = 0x%lx\n",0
00008c  3d203078
000090  256c780a
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L11.152|
000098  6c722020          DCB      "lr  = 0x%lx\n",0
00009c  3d203078
0000a0  256c780a
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L11.168|
0000a8  70632020          DCB      "pc  = 0x%lx\n",0
0000ac  3d203078
0000b0  256c780a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L11.184|
0000b8  70737220          DCB      "psr = 0x%lx\n",0
0000bc  3d203078
0000c0  256c780a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_d5a1b03f____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REVSH|
#line 479
|__asm___10_retarget_c_d5a1b03f____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 460 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 461

 MOVS r0, #4 
 MOV r1, LR
 TST r0, r1  
 BEQ Stack_Use_MSP  
 MRS R0, PSP  
 B Get_LR_and_Branch
Stack_Use_MSP
 MRS R0, MSP  
Get_LR_and_Branch
 MOV R1, LR  
 LDR R2,= |Hard_Fault_Handler|  
 BX R2
	ENDP

;*** End   embedded assembler ***
