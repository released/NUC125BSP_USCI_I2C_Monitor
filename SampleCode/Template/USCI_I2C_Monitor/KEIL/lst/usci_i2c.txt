; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usci_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usci_i2c.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\usci_i2c.crf ..\..\..\..\Library\StdDriver\src\usci_i2c.c]
                          THUMB

                          AREA ||i.UI2C_ClearIntFlag||, CODE, READONLY, ALIGN=1

                  UI2C_ClearIntFlag PROC
;;;340     */
;;;341    void UI2C_ClearIntFlag(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;342    {
000002  d001              BEQ      |L1.8|
;;;343        /* Clear Time-out Interrupt Flag */
;;;344        if (u32Mask & UI2C_TO_INT_MASK)
;;;345            ui2c->PROTSTS = UI2C_PROTSTS_TOIF_Msk;
000004  2220              MOVS     r2,#0x20
000006  6642              STR      r2,[r0,#0x64]
                  |L1.8|
;;;346    
;;;347        /* Clear Start Condition Received Interrupt Flag */
;;;348        if (u32Mask & UI2C_STAR_INT_MASK)
000008  078a              LSLS     r2,r1,#30
00000a  d502              BPL      |L1.18|
;;;349            ui2c->PROTSTS = UI2C_PROTSTS_STARIF_Msk;
00000c  22ff              MOVS     r2,#0xff
00000e  3201              ADDS     r2,#1
000010  6642              STR      r2,[r0,#0x64]
                  |L1.18|
;;;350    
;;;351        /* Clear Stop Condition Received Interrupt Flag */
;;;352        if (u32Mask & UI2C_STOR_INT_MASK)
000012  074a              LSLS     r2,r1,#29
000014  d502              BPL      |L1.28|
;;;353            ui2c->PROTSTS = UI2C_PROTSTS_STORIF_Msk;
000016  2201              MOVS     r2,#1
000018  0252              LSLS     r2,r2,#9
00001a  6642              STR      r2,[r0,#0x64]
                  |L1.28|
;;;354    
;;;355        /* Clear Non-Acknowledge Interrupt Flag */
;;;356        if (u32Mask & UI2C_NACK_INT_MASK)
00001c  070a              LSLS     r2,r1,#28
00001e  d502              BPL      |L1.38|
;;;357            ui2c->PROTSTS = UI2C_PROTSTS_NACKIF_Msk;
000020  2201              MOVS     r2,#1
000022  0292              LSLS     r2,r2,#10
000024  6642              STR      r2,[r0,#0x64]
                  |L1.38|
;;;358    
;;;359        /* Clear Arbitration Lost Interrupt Flag */
;;;360        if (u32Mask & UI2C_ARBLO_INT_MASK)
000026  06ca              LSLS     r2,r1,#27
000028  d502              BPL      |L1.48|
;;;361            ui2c->PROTSTS = UI2C_PROTSTS_ARBLOIF_Msk;
00002a  2201              MOVS     r2,#1
00002c  02d2              LSLS     r2,r2,#11
00002e  6642              STR      r2,[r0,#0x64]
                  |L1.48|
;;;362    
;;;363        /* Clear Error Interrupt Flag */
;;;364        if (u32Mask & UI2C_ERR_INT_MASK)
000030  068a              LSLS     r2,r1,#26
000032  d502              BPL      |L1.58|
;;;365            ui2c->PROTSTS = UI2C_PROTSTS_ERRIF_Msk;
000034  2201              MOVS     r2,#1
000036  0312              LSLS     r2,r2,#12
000038  6642              STR      r2,[r0,#0x64]
                  |L1.58|
;;;366    
;;;367        /* Clear Acknowledge Interrupt Flag */
;;;368        if (u32Mask & UI2C_ACK_INT_MASK)
00003a  0649              LSLS     r1,r1,#25
00003c  d502              BPL      |L1.68|
;;;369            ui2c->PROTSTS = UI2C_PROTSTS_ACKIF_Msk;
00003e  2101              MOVS     r1,#1
000040  0349              LSLS     r1,r1,#13
000042  6641              STR      r1,[r0,#0x64]
                  |L1.68|
;;;370    }
000044  4770              BX       lr
;;;371    
                          ENDP


                          AREA ||i.UI2C_ClearTimeoutFlag||, CODE, READONLY, ALIGN=1

                  UI2C_ClearTimeoutFlag PROC
;;;85      */
;;;86     void UI2C_ClearTimeoutFlag(UI2C_T *ui2c)
000000  2120              MOVS     r1,#0x20
;;;87     {
;;;88         ui2c->PROTSTS = UI2C_PROTSTS_TOIF_Msk;
000002  6641              STR      r1,[r0,#0x64]
;;;89     }
000004  4770              BX       lr
;;;90     
                          ENDP


                          AREA ||i.UI2C_Close||, CODE, READONLY, ALIGN=1

                  UI2C_Close PROC
;;;70      */
;;;71     void UI2C_Close(UI2C_T *ui2c)
000000  6801              LDR      r1,[r0,#0]
;;;72     {
;;;73         /* Disable USCI_I2C function */
;;;74         ui2c->CTL &= ~UI2C_CTL_FUNMODE_Msk;
000002  08c9              LSRS     r1,r1,#3
000004  00c9              LSLS     r1,r1,#3
000006  6001              STR      r1,[r0,#0]
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.UI2C_DisableInt||, CODE, READONLY, ALIGN=1

                  UI2C_DisableInt PROC
;;;142     */
;;;143    void UI2C_DisableInt(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;144    {
000002  d003              BEQ      |L4.12|
;;;145        /* Disable time-out interrupt flag */
;;;146        if ((u32Mask & UI2C_TO_INT_MASK) == UI2C_TO_INT_MASK)
;;;147            ui2c->PROTIEN &= ~UI2C_PROTIEN_TOIEN_Msk;
000004  6e02              LDR      r2,[r0,#0x60]
000006  0852              LSRS     r2,r2,#1
000008  0052              LSLS     r2,r2,#1
00000a  6602              STR      r2,[r0,#0x60]
                  |L4.12|
;;;148    
;;;149        /* Disable start condition received interrupt flag */
;;;150        if ((u32Mask & UI2C_STAR_INT_MASK) == UI2C_STAR_INT_MASK)
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L4.24|
;;;151            ui2c->PROTIEN &= ~UI2C_PROTIEN_STARIEN_Msk;
000010  6e02              LDR      r2,[r0,#0x60]
000012  2302              MOVS     r3,#2
000014  439a              BICS     r2,r2,r3
000016  6602              STR      r2,[r0,#0x60]
                  |L4.24|
;;;152    
;;;153        /* Disable stop condition received interrupt flag */
;;;154        if ((u32Mask & UI2C_STOR_INT_MASK) == UI2C_STOR_INT_MASK)
000018  074a              LSLS     r2,r1,#29
00001a  d503              BPL      |L4.36|
;;;155            ui2c->PROTIEN &= ~UI2C_PROTIEN_STORIEN_Msk;
00001c  6e02              LDR      r2,[r0,#0x60]
00001e  2304              MOVS     r3,#4
000020  439a              BICS     r2,r2,r3
000022  6602              STR      r2,[r0,#0x60]
                  |L4.36|
;;;156    
;;;157        /* Disable non-acknowledge interrupt flag */
;;;158        if ((u32Mask & UI2C_NACK_INT_MASK) == UI2C_NACK_INT_MASK)
000024  070a              LSLS     r2,r1,#28
000026  d503              BPL      |L4.48|
;;;159            ui2c->PROTIEN &= ~UI2C_PROTIEN_NACKIEN_Msk;
000028  6e02              LDR      r2,[r0,#0x60]
00002a  2308              MOVS     r3,#8
00002c  439a              BICS     r2,r2,r3
00002e  6602              STR      r2,[r0,#0x60]
                  |L4.48|
;;;160    
;;;161        /* Disable arbitration lost interrupt flag */
;;;162        if ((u32Mask & UI2C_ARBLO_INT_MASK) == UI2C_ARBLO_INT_MASK)
000030  06ca              LSLS     r2,r1,#27
000032  d503              BPL      |L4.60|
;;;163            ui2c->PROTIEN &= ~UI2C_PROTIEN_ARBLOIEN_Msk;
000034  6e02              LDR      r2,[r0,#0x60]
000036  2310              MOVS     r3,#0x10
000038  439a              BICS     r2,r2,r3
00003a  6602              STR      r2,[r0,#0x60]
                  |L4.60|
;;;164    
;;;165        /* Disable error interrupt flag */
;;;166        if ((u32Mask & UI2C_ERR_INT_MASK) == UI2C_ERR_INT_MASK)
00003c  068a              LSLS     r2,r1,#26
00003e  d503              BPL      |L4.72|
;;;167            ui2c->PROTIEN &= ~UI2C_PROTIEN_ERRIEN_Msk;
000040  6e02              LDR      r2,[r0,#0x60]
000042  2320              MOVS     r3,#0x20
000044  439a              BICS     r2,r2,r3
000046  6602              STR      r2,[r0,#0x60]
                  |L4.72|
;;;168    
;;;169        /* Disable acknowledge interrupt flag */
;;;170        if ((u32Mask & UI2C_ACK_INT_MASK) == UI2C_ACK_INT_MASK)
000048  0649              LSLS     r1,r1,#25
00004a  d503              BPL      |L4.84|
;;;171            ui2c->PROTIEN &= ~UI2C_PROTIEN_ACKIEN_Msk;
00004c  6e01              LDR      r1,[r0,#0x60]
00004e  2240              MOVS     r2,#0x40
000050  4391              BICS     r1,r1,r2
000052  6601              STR      r1,[r0,#0x60]
                  |L4.84|
;;;172    }
000054  4770              BX       lr
;;;173    
                          ENDP


                          AREA ||i.UI2C_DisableTimeout||, CODE, READONLY, ALIGN=2

                  UI2C_DisableTimeout PROC
;;;469     */
;;;470    void UI2C_DisableTimeout(UI2C_T *ui2c)
000000  6dc1              LDR      r1,[r0,#0x5c]
;;;471    {
;;;472        ui2c->PROTCTL &= ~UI2C_PROTCTL_TOCNT_Msk;
000002  4a04              LDR      r2,|L5.20|
000004  4011              ANDS     r1,r1,r2
000006  65c1              STR      r1,[r0,#0x5c]
;;;473        ui2c->BRGEN &= ~UI2C_BRGEN_TMCNTEN_Msk;
000008  6881              LDR      r1,[r0,#8]
00000a  2210              MOVS     r2,#0x10
00000c  4391              BICS     r1,r1,r2
00000e  6081              STR      r1,[r0,#8]
;;;474    }
000010  4770              BX       lr
;;;475    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_DisableWakeup||, CODE, READONLY, ALIGN=1

                  UI2C_DisableWakeup PROC
;;;501     */
;;;502    void UI2C_DisableWakeup(UI2C_T *ui2c)
000000  6d41              LDR      r1,[r0,#0x54]
;;;503    {
;;;504        ui2c->WKCTL &= ~UI2C_WKCTL_WKEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6541              STR      r1,[r0,#0x54]
;;;505    }
000008  4770              BX       lr
;;;506    
                          ENDP


                          AREA ||i.UI2C_EnableInt||, CODE, READONLY, ALIGN=1

                  UI2C_EnableInt PROC
;;;190     */
;;;191    void UI2C_EnableInt(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;192    {
000002  d003              BEQ      |L7.12|
;;;193        /* Enable time-out interrupt flag */
;;;194        if ((u32Mask & UI2C_TO_INT_MASK) == UI2C_TO_INT_MASK)
;;;195            ui2c->PROTIEN |= UI2C_PROTIEN_TOIEN_Msk;
000004  6e02              LDR      r2,[r0,#0x60]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6602              STR      r2,[r0,#0x60]
                  |L7.12|
;;;196    
;;;197        /* Enable start condition received interrupt flag */
;;;198        if ((u32Mask & UI2C_STAR_INT_MASK) == UI2C_STAR_INT_MASK)
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L7.24|
;;;199            ui2c->PROTIEN |= UI2C_PROTIEN_STARIEN_Msk;
000010  6e02              LDR      r2,[r0,#0x60]
000012  2302              MOVS     r3,#2
000014  431a              ORRS     r2,r2,r3
000016  6602              STR      r2,[r0,#0x60]
                  |L7.24|
;;;200    
;;;201        /* Enable stop condition received interrupt flag */
;;;202        if ((u32Mask & UI2C_STOR_INT_MASK) == UI2C_STOR_INT_MASK)
000018  074a              LSLS     r2,r1,#29
00001a  d503              BPL      |L7.36|
;;;203            ui2c->PROTIEN |= UI2C_PROTIEN_STORIEN_Msk;
00001c  6e02              LDR      r2,[r0,#0x60]
00001e  2304              MOVS     r3,#4
000020  431a              ORRS     r2,r2,r3
000022  6602              STR      r2,[r0,#0x60]
                  |L7.36|
;;;204    
;;;205        /* Enable non-acknowledge interrupt flag */
;;;206        if ((u32Mask & UI2C_NACK_INT_MASK) == UI2C_NACK_INT_MASK)
000024  070a              LSLS     r2,r1,#28
000026  d503              BPL      |L7.48|
;;;207            ui2c->PROTIEN |= UI2C_PROTIEN_NACKIEN_Msk;
000028  6e02              LDR      r2,[r0,#0x60]
00002a  2308              MOVS     r3,#8
00002c  431a              ORRS     r2,r2,r3
00002e  6602              STR      r2,[r0,#0x60]
                  |L7.48|
;;;208    
;;;209        /* Enable arbitration lost interrupt flag */
;;;210        if ((u32Mask & UI2C_ARBLO_INT_MASK) == UI2C_ARBLO_INT_MASK)
000030  06ca              LSLS     r2,r1,#27
000032  d503              BPL      |L7.60|
;;;211            ui2c->PROTIEN |= UI2C_PROTIEN_ARBLOIEN_Msk;
000034  6e02              LDR      r2,[r0,#0x60]
000036  2310              MOVS     r3,#0x10
000038  431a              ORRS     r2,r2,r3
00003a  6602              STR      r2,[r0,#0x60]
                  |L7.60|
;;;212    
;;;213        /* Enable error interrupt flag */
;;;214        if ((u32Mask & UI2C_ERR_INT_MASK) == UI2C_ERR_INT_MASK)
00003c  068a              LSLS     r2,r1,#26
00003e  d503              BPL      |L7.72|
;;;215            ui2c->PROTIEN |= UI2C_PROTIEN_ERRIEN_Msk;
000040  6e02              LDR      r2,[r0,#0x60]
000042  2320              MOVS     r3,#0x20
000044  431a              ORRS     r2,r2,r3
000046  6602              STR      r2,[r0,#0x60]
                  |L7.72|
;;;216    
;;;217        /* Enable acknowledge interrupt flag */
;;;218        if ((u32Mask & UI2C_ACK_INT_MASK) == UI2C_ACK_INT_MASK)
000048  0649              LSLS     r1,r1,#25
00004a  d503              BPL      |L7.84|
;;;219            ui2c->PROTIEN |= UI2C_PROTIEN_ACKIEN_Msk;
00004c  6e01              LDR      r1,[r0,#0x60]
00004e  2240              MOVS     r2,#0x40
000050  4311              ORRS     r1,r1,r2
000052  6601              STR      r1,[r0,#0x60]
                  |L7.84|
;;;220    }
000054  4770              BX       lr
;;;221    
                          ENDP


                          AREA ||i.UI2C_EnableTimeout||, CODE, READONLY, ALIGN=2

                  UI2C_EnableTimeout PROC
;;;454     */
;;;455    void UI2C_EnableTimeout(UI2C_T *ui2c, uint32_t u32TimeoutCnt)
000000  6dc2              LDR      r2,[r0,#0x5c]
;;;456    {
;;;457        ui2c->PROTCTL = (ui2c->PROTCTL & ~UI2C_PROTCTL_TOCNT_Msk) | (u32TimeoutCnt << UI2C_PROTCTL_TOCNT_Pos);
000002  4b06              LDR      r3,|L8.28|
000004  0409              LSLS     r1,r1,#16
000006  401a              ANDS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  65c2              STR      r2,[r0,#0x5c]
;;;458        ui2c->BRGEN = (ui2c->BRGEN & ~UI2C_BRGEN_TMCNTSRC_Msk) | UI2C_BRGEN_TMCNTEN_Msk;
00000c  6881              LDR      r1,[r0,#8]
00000e  2220              MOVS     r2,#0x20
000010  4391              BICS     r1,r1,r2
000012  2210              MOVS     r2,#0x10
000014  4311              ORRS     r1,r1,r2
000016  6081              STR      r1,[r0,#8]
;;;459    }
000018  4770              BX       lr
;;;460    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_EnableWakeup||, CODE, READONLY, ALIGN=1

                  UI2C_EnableWakeup PROC
;;;487     */
;;;488    void UI2C_EnableWakeup(UI2C_T *ui2c, uint8_t u8WakeupMode)
000000  6d42              LDR      r2,[r0,#0x54]
;;;489    {
;;;490        ui2c->WKCTL = (ui2c->WKCTL & ~UI2C_WKCTL_WKADDREN_Msk) | (u8WakeupMode | UI2C_WKCTL_WKEN_Msk);
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  2101              MOVS     r1,#1
00000a  430a              ORRS     r2,r2,r1
00000c  6542              STR      r2,[r0,#0x54]
;;;491    }
00000e  4770              BX       lr
;;;492    
                          ENDP


                          AREA ||i.UI2C_GetBusClockFreq||, CODE, READONLY, ALIGN=1

                  UI2C_GetBusClockFreq PROC
;;;230     */
;;;231    uint32_t UI2C_GetBusClockFreq(UI2C_T *ui2c)
000000  b510              PUSH     {r4,lr}
;;;232    {
000002  4604              MOV      r4,r0
;;;233        uint32_t u32Divider;
;;;234        uint32_t u32Pclk;
;;;235    
;;;236        u32Pclk = CLK_GetPCLK0Freq();
000004  f7fffffe          BL       CLK_GetPCLK0Freq
;;;237    
;;;238        u32Divider = (ui2c->BRGEN & UI2C_BRGEN_CLKDIV_Msk) >> UI2C_BRGEN_CLKDIV_Pos;
000008  68a1              LDR      r1,[r4,#8]
;;;239    
;;;240        return (u32Pclk / ((u32Divider + 1) << 1));
;;;241    }
00000a  0189              LSLS     r1,r1,#6
00000c  0d89              LSRS     r1,r1,#22
00000e  0049              LSLS     r1,r1,#1              ;240
000010  1c89              ADDS     r1,r1,#2              ;240
000012  f7fffffe          BL       __aeabi_uidivmod
000016  bd10              POP      {r4,pc}
;;;242    
                          ENDP


                          AREA ||i.UI2C_GetData||, CODE, READONLY, ALIGN=1

                  UI2C_GetData PROC
;;;380     */
;;;381    uint32_t UI2C_GetData(UI2C_T *ui2c)
000000  6b40              LDR      r0,[r0,#0x34]
;;;382    {
;;;383        return (ui2c->RXDAT);
;;;384    }
000002  4770              BX       lr
;;;385    
                          ENDP


                          AREA ||i.UI2C_GetIntFlag||, CODE, READONLY, ALIGN=1

                  UI2C_GetIntFlag PROC
;;;287     */
;;;288    uint32_t UI2C_GetIntFlag(UI2C_T *ui2c, uint32_t u32Mask)
000000  4602              MOV      r2,r0
;;;289    {
;;;290        uint32_t u32IntFlag = 0;
000002  2000              MOVS     r0,#0
;;;291    
;;;292        /* Check Time-out Interrupt Flag */
;;;293        if ((u32Mask & UI2C_TO_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_TOIF_Msk))
000004  07cb              LSLS     r3,r1,#31
000006  d003              BEQ      |L12.16|
000008  6e53              LDR      r3,[r2,#0x64]
00000a  069b              LSLS     r3,r3,#26
00000c  d500              BPL      |L12.16|
;;;294            u32IntFlag |= UI2C_TO_INT_MASK;
00000e  2001              MOVS     r0,#1
                  |L12.16|
;;;295    
;;;296        /* Check Start Condition Received Interrupt Flag */
;;;297        if ((u32Mask & UI2C_STAR_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_STARIF_Msk))
000010  078b              LSLS     r3,r1,#30
000012  d504              BPL      |L12.30|
000014  6e53              LDR      r3,[r2,#0x64]
000016  05db              LSLS     r3,r3,#23
000018  d501              BPL      |L12.30|
;;;298            u32IntFlag |= UI2C_STAR_INT_MASK;
00001a  2302              MOVS     r3,#2
00001c  4318              ORRS     r0,r0,r3
                  |L12.30|
;;;299    
;;;300        /* Check Stop Condition Received Interrupt Flag */
;;;301        if ((u32Mask & UI2C_STOR_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_STORIF_Msk))
00001e  074b              LSLS     r3,r1,#29
000020  d504              BPL      |L12.44|
000022  6e53              LDR      r3,[r2,#0x64]
000024  059b              LSLS     r3,r3,#22
000026  d501              BPL      |L12.44|
;;;302            u32IntFlag |= UI2C_STOR_INT_MASK;
000028  2304              MOVS     r3,#4
00002a  4318              ORRS     r0,r0,r3
                  |L12.44|
;;;303    
;;;304        /* Check Non-Acknowledge Interrupt Flag */
;;;305        if ((u32Mask & UI2C_NACK_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_NACKIF_Msk))
00002c  070b              LSLS     r3,r1,#28
00002e  d504              BPL      |L12.58|
000030  6e53              LDR      r3,[r2,#0x64]
000032  055b              LSLS     r3,r3,#21
000034  d501              BPL      |L12.58|
;;;306            u32IntFlag |= UI2C_NACK_INT_MASK;
000036  2308              MOVS     r3,#8
000038  4318              ORRS     r0,r0,r3
                  |L12.58|
;;;307    
;;;308        /* Check Arbitration Lost Interrupt Flag */
;;;309        if ((u32Mask & UI2C_ARBLO_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_ARBLOIF_Msk))
00003a  06cb              LSLS     r3,r1,#27
00003c  d504              BPL      |L12.72|
00003e  6e53              LDR      r3,[r2,#0x64]
000040  051b              LSLS     r3,r3,#20
000042  d501              BPL      |L12.72|
;;;310            u32IntFlag |= UI2C_ARBLO_INT_MASK;
000044  2310              MOVS     r3,#0x10
000046  4318              ORRS     r0,r0,r3
                  |L12.72|
;;;311    
;;;312        /* Check Error Interrupt Flag */
;;;313        if ((u32Mask & UI2C_ERR_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_ERRIF_Msk))
000048  068b              LSLS     r3,r1,#26
00004a  d504              BPL      |L12.86|
00004c  6e53              LDR      r3,[r2,#0x64]
00004e  04db              LSLS     r3,r3,#19
000050  d501              BPL      |L12.86|
;;;314            u32IntFlag |= UI2C_ERR_INT_MASK;
000052  2320              MOVS     r3,#0x20
000054  4318              ORRS     r0,r0,r3
                  |L12.86|
;;;315    
;;;316        /* Check Acknowledge Interrupt Flag */
;;;317        if ((u32Mask & UI2C_ACK_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_ACKIF_Msk))
000056  0649              LSLS     r1,r1,#25
000058  d504              BPL      |L12.100|
00005a  6e51              LDR      r1,[r2,#0x64]
00005c  0489              LSLS     r1,r1,#18
00005e  d501              BPL      |L12.100|
;;;318            u32IntFlag |= UI2C_ACK_INT_MASK;
000060  2140              MOVS     r1,#0x40
000062  4308              ORRS     r0,r0,r1
                  |L12.100|
;;;319    
;;;320        return u32IntFlag;
;;;321    }
000064  4770              BX       lr
;;;322    
                          ENDP


                          AREA ||i.UI2C_Open||, CODE, READONLY, ALIGN=2

                  UI2C_Open PROC
;;;32      */
;;;33     uint32_t UI2C_Open(UI2C_T *ui2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;35         uint32_t u32ClkDiv;
;;;36         uint32_t u32Pclk;
;;;37     
;;;38         u32Pclk = CLK_GetPCLK0Freq();
000006  f7fffffe          BL       CLK_GetPCLK0Freq
00000a  4605              MOV      r5,r0
;;;39     
;;;40         u32ClkDiv = (uint32_t)((((((u32Pclk / 2) * 10) / (u32BusClock)) + 5) / 10) - 1); /* Compute proper divider for USCI_I2C clock */
00000c  0840              LSRS     r0,r0,#1
00000e  210a              MOVS     r1,#0xa
000010  4348              MULS     r0,r1,r0
000012  4631              MOV      r1,r6
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  1d40              ADDS     r0,r0,#5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;41     
;;;42         /* Enable USCI_I2C protocol */
;;;43         ui2c->CTL &= ~UI2C_CTL_FUNMODE_Msk;
000020  6821              LDR      r1,[r4,#0]
000022  08c9              LSRS     r1,r1,#3
000024  00c9              LSLS     r1,r1,#3
000026  6021              STR      r1,[r4,#0]
;;;44         ui2c->CTL = 4 << UI2C_CTL_FUNMODE_Pos;
000028  2104              MOVS     r1,#4
00002a  6021              STR      r1,[r4,#0]
;;;45     
;;;46         /* Data format configuration */
;;;47         /* 8 bit data length */
;;;48         ui2c->LINECTL &= ~UI2C_LINECTL_DWIDTH_Msk;
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  220f              MOVS     r2,#0xf
000030  0212              LSLS     r2,r2,#8
000032  4391              BICS     r1,r1,r2
000034  62e1              STR      r1,[r4,#0x2c]
;;;49         ui2c->LINECTL |= 8 << UI2C_LINECTL_DWIDTH_Pos;
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  2201              MOVS     r2,#1
00003a  02d2              LSLS     r2,r2,#11
00003c  4311              ORRS     r1,r1,r2
00003e  62e1              STR      r1,[r4,#0x2c]
;;;50     
;;;51         /* MSB data format */
;;;52         ui2c->LINECTL &= ~UI2C_LINECTL_LSB_Msk;
000040  6ae1              LDR      r1,[r4,#0x2c]
000042  0849              LSRS     r1,r1,#1
000044  0049              LSLS     r1,r1,#1
000046  62e1              STR      r1,[r4,#0x2c]
;;;53     
;;;54         /* Set USCI_I2C bus clock */
;;;55         ui2c->BRGEN &= ~UI2C_BRGEN_CLKDIV_Msk;
000048  68a1              LDR      r1,[r4,#8]
00004a  4a09              LDR      r2,|L13.112|
00004c  4011              ANDS     r1,r1,r2
00004e  60a1              STR      r1,[r4,#8]
;;;56         ui2c->BRGEN |= (u32ClkDiv << UI2C_BRGEN_CLKDIV_Pos);
000050  68a1              LDR      r1,[r4,#8]
000052  1e40              SUBS     r0,r0,#1
000054  0402              LSLS     r2,r0,#16
000056  4311              ORRS     r1,r1,r2
000058  60a1              STR      r1,[r4,#8]
;;;57         ui2c->PROTCTL |=  UI2C_PROTCTL_PROTEN_Msk;
00005a  6de1              LDR      r1,[r4,#0x5c]
00005c  2201              MOVS     r2,#1
00005e  07d2              LSLS     r2,r2,#31
000060  4311              ORRS     r1,r1,r2
000062  65e1              STR      r1,[r4,#0x5c]
;;;58     
;;;59         return (u32Pclk / ((u32ClkDiv + 1) << 1));
000064  0041              LSLS     r1,r0,#1
000066  4628              MOV      r0,r5
000068  1c89              ADDS     r1,r1,#2
00006a  f7fffffe          BL       __aeabi_uidivmod
;;;60     }
00006e  bd70              POP      {r4-r6,pc}
;;;61     
                          ENDP

                  |L13.112|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_ReadByte||, CODE, READONLY, ALIGN=2

                  UI2C_ReadByte PROC
;;;961      */
;;;962    uint8_t UI2C_ReadByte(UI2C_T *ui2c, uint8_t u8SlaveAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;963    {
;;;964        uint8_t u8Xfering = 1, u8Err = 0, u8rData = 0, u8Ctrl = 0;
000002  2300              MOVS     r3,#0
000004  2601              MOVS     r6,#1
;;;965        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;966    
;;;967        UI2C_START(ui2c);                                                       /* Send START */
000006  6dc7              LDR      r7,[r0,#0x5c]
000008  468c              MOV      r12,r1                ;963
00000a  461d              MOV      r5,r3                 ;964
00000c  461a              MOV      r2,r3                 ;964
00000e  2412              MOVS     r4,#0x12              ;965
000010  2120              MOVS     r1,#0x20
000012  438f              BICS     r7,r7,r1
000014  2108              MOVS     r1,#8
000016  430f              ORRS     r7,r7,r1
000018  65c7              STR      r7,[r0,#0x5c]
                  |L14.26|
;;;968    
;;;969        while (u8Xfering && (u8Err == 0))
;;;970        {
;;;971            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L14.26|
;;;972    
;;;973            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000022  6e47              LDR      r7,[r0,#0x64]
000024  213f              MOVS     r1,#0x3f
000026  0209              LSLS     r1,r1,#8
000028  400f              ANDS     r7,r7,r1
00002a  3fff              SUBS     r7,r7,#0xff
00002c  1e7f              SUBS     r7,r7,#1
00002e  d00d              BEQ      |L14.76|
000030  2103              MOVS     r1,#3
000032  0209              LSLS     r1,r1,#8
000034  1a7f              SUBS     r7,r7,r1
000036  d014              BEQ      |L14.98|
000038  2107              MOVS     r1,#7
00003a  0289              LSLS     r1,r1,#10
00003c  428f              CMP      r7,r1
00003e  d124              BNE      |L14.138|
;;;974            {
;;;975            case UI2C_PROTSTS_STARIF_Msk:
;;;976                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;977                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x01);             /* Write SLA+R to Register UI2C_TXDAT */
;;;978                eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;979                u8Ctrl = UI2C_CTL_PTRG;
;;;980                break;
;;;981    
;;;982            case UI2C_PROTSTS_ACKIF_Msk:
;;;983                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000040  2401              MOVS     r4,#1
000042  4916              LDR      r1,|L14.156|
000044  0364              LSLS     r4,r4,#13
000046  624c              STR      r4,[r1,#0x24]
;;;984                eEvent = MASTER_READ_DATA;
000048  2410              MOVS     r4,#0x10
;;;985                break;
00004a  e014              B        |L14.118|
                  |L14.76|
00004c  22ff              MOVS     r2,#0xff              ;976
00004e  4913              LDR      r1,|L14.156|
000050  3201              ADDS     r2,#1                 ;976
000052  624a              STR      r2,[r1,#0x24]         ;976
000054  4661              MOV      r1,r12                ;977
000056  0049              LSLS     r1,r1,#1              ;977
000058  1c49              ADDS     r1,r1,#1              ;977
00005a  6301              STR      r1,[r0,#0x30]         ;977
00005c  240c              MOVS     r4,#0xc               ;978
00005e  2220              MOVS     r2,#0x20              ;979
000060  e009              B        |L14.118|
                  |L14.98|
;;;986    
;;;987            case UI2C_PROTSTS_NACKIF_Msk:
;;;988                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
000062  2201              MOVS     r2,#1
000064  490d              LDR      r1,|L14.156|
000066  0292              LSLS     r2,r2,#10
000068  624a              STR      r2,[r1,#0x24]
;;;989    
;;;990                if (eEvent == MASTER_SEND_H_RD_ADDRESS)
00006a  2c0c              CMP      r4,#0xc
00006c  d00d              BEQ      |L14.138|
;;;991                {
;;;992                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;993                    u8Err = 1;
;;;994                }
;;;995                else
;;;996                {
;;;997                    u8rData = (unsigned char) UI2C_GET_DATA(ui2c);            /* Receive Data */
00006e  6b41              LDR      r1,[r0,#0x34]
;;;998                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
000070  2224              MOVS     r2,#0x24
000072  b2cd              UXTB     r5,r1                 ;997
;;;999                    u8Xfering = 0;
000074  2600              MOVS     r6,#0
                  |L14.118|
;;;1000               }
;;;1001   
;;;1002               break;
;;;1003   
;;;1004           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1005           default:                                                        /* Unknow status */
;;;1006               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1007               u8Err = 1;
;;;1008               break;
;;;1009           }
;;;1010   
;;;1011           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000076  6dc7              LDR      r7,[r0,#0x5c]
000078  212e              MOVS     r1,#0x2e
00007a  438f              BICS     r7,r7,r1
00007c  4317              ORRS     r7,r7,r2
00007e  65c7              STR      r7,[r0,#0x5c]
000080  2e00              CMP      r6,#0                 ;969
000082  d005              BEQ      |L14.144|
000084  2b00              CMP      r3,#0                 ;969
000086  d0c8              BEQ      |L14.26|
000088  e004              B        |L14.148|
                  |L14.138|
00008a  2224              MOVS     r2,#0x24              ;992
00008c  2301              MOVS     r3,#1                 ;993
00008e  e7f2              B        |L14.118|
                  |L14.144|
;;;1012       }
;;;1013   
;;;1014       if (u8Err)
000090  2b00              CMP      r3,#0
000092  d000              BEQ      |L14.150|
                  |L14.148|
;;;1015           u8rData = 0;
000094  2500              MOVS     r5,#0
                  |L14.150|
;;;1016   
;;;1017       return u8rData;                                                           /* Return read data */
000096  4628              MOV      r0,r5
;;;1018   }
000098  bdf0              POP      {r4-r7,pc}
;;;1019   
                          ENDP

00009a  0000              DCW      0x0000
                  |L14.156|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadByteOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_ReadByteOneReg PROC
;;;1119     */
;;;1120   uint8_t UI2C_ReadByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1121   {
000002  4696              MOV      lr,r2
;;;1122       uint8_t u8Xfering = 1, u8Err = 0, u8rData = 0, u8Ctrl = 0;
000004  2201              MOVS     r2,#1
000006  4694              MOV      r12,r2
000008  2400              MOVS     r4,#0
;;;1123       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1124   
;;;1125       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc2              LDR      r2,[r0,#0x5c]
00000c  4625              MOV      r5,r4                 ;1122
00000e  2312              MOVS     r3,#0x12              ;1123
000010  2620              MOVS     r6,#0x20
000012  43b2              BICS     r2,r2,r6
000014  2608              MOVS     r6,#8
000016  4332              ORRS     r2,r2,r6
000018  65c2              STR      r2,[r0,#0x5c]
;;;1126   
;;;1127       while (u8Xfering && (u8Err == 0))
;;;1128       {
;;;1129           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1130   
;;;1131           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1132           {
;;;1133           case UI2C_PROTSTS_STARIF_Msk:
;;;1134               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1135   
;;;1136               if (eEvent == MASTER_SEND_START)
;;;1137               {
;;;1138                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);         /* Write SLA+W to Register UI2C_TXDAT */
00001a  004e              LSLS     r6,r1,#1
                  |L15.28|
00001c  6e41              LDR      r1,[r0,#0x64]         ;1129
00001e  0489              LSLS     r1,r1,#18             ;1129
000020  0e89              LSRS     r1,r1,#26             ;1129
000022  d0fb              BEQ      |L15.28|
000024  6e41              LDR      r1,[r0,#0x64]         ;1131
000026  273f              MOVS     r7,#0x3f              ;1131
000028  023f              LSLS     r7,r7,#8              ;1131
00002a  4039              ANDS     r1,r1,r7              ;1131
00002c  39ff              SUBS     r1,r1,#0xff           ;1131
00002e  1e49              SUBS     r1,r1,#1              ;1131
000030  d012              BEQ      |L15.88|
000032  2703              MOVS     r7,#3                 ;1131
000034  023f              LSLS     r7,r7,#8              ;1131
000036  1bc9              SUBS     r1,r1,r7              ;1131
000038  d029              BEQ      |L15.142|
00003a  2707              MOVS     r7,#7                 ;1131
00003c  02bf              LSLS     r7,r7,#10             ;1131
00003e  42b9              CMP      r1,r7                 ;1131
000040  d13b              BNE      |L15.186|
;;;1139                   eEvent = MASTER_SEND_ADDRESS;
;;;1140               }
;;;1141               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1142               {
;;;1143                   UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1144                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1145               }
;;;1146   
;;;1147               u8Ctrl = UI2C_CTL_PTRG;
;;;1148               break;
;;;1149   
;;;1150           case UI2C_PROTSTS_ACKIF_Msk:
;;;1151               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  4921              LDR      r1,|L15.204|
000046  037f              LSLS     r7,r7,#13
000048  624f              STR      r7,[r1,#0x24]
;;;1152   
;;;1153               if (eEvent == MASTER_SEND_ADDRESS)
00004a  2b0a              CMP      r3,#0xa
00004c  d017              BEQ      |L15.126|
;;;1154               {
;;;1155                   UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address of register */
;;;1156                   u8Ctrl = UI2C_CTL_PTRG;
;;;1157                   eEvent = MASTER_SEND_DATA;
;;;1158               }
;;;1159               else if (eEvent == MASTER_SEND_DATA)
00004e  2b0e              CMP      r3,#0xe
000050  d01a              BEQ      |L15.136|
;;;1160               {
;;;1161                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1162                   eEvent = MASTER_SEND_REPEAT_START;
;;;1163               }
;;;1164               else
;;;1165               {
;;;1166                   /* SLA+R ACK */
;;;1167                   u8Ctrl = UI2C_CTL_PTRG;
000052  2120              MOVS     r1,#0x20
;;;1168                   eEvent = MASTER_READ_DATA;
000054  2310              MOVS     r3,#0x10
000056  e025              B        |L15.164|
                  |L15.88|
000058  27ff              MOVS     r7,#0xff              ;1134
00005a  491c              LDR      r1,|L15.204|
00005c  3701              ADDS     r7,#1                 ;1134
00005e  624f              STR      r7,[r1,#0x24]         ;1134
000060  2b12              CMP      r3,#0x12              ;1136
000062  d002              BEQ      |L15.106|
000064  2b0f              CMP      r3,#0xf               ;1141
000066  d003              BEQ      |L15.112|
000068  e007              B        |L15.122|
                  |L15.106|
00006a  6306              STR      r6,[r0,#0x30]         ;1138
00006c  230a              MOVS     r3,#0xa               ;1139
00006e  e004              B        |L15.122|
                  |L15.112|
000070  4a16              LDR      r2,|L15.204|
000072  1c71              ADDS     r1,r6,#1              ;1143
000074  3a40              SUBS     r2,r2,#0x40           ;1143
000076  6311              STR      r1,[r2,#0x30]         ;1143
000078  230c              MOVS     r3,#0xc               ;1144
                  |L15.122|
00007a  2120              MOVS     r1,#0x20              ;1147
00007c  e012              B        |L15.164|
                  |L15.126|
00007e  4671              MOV      r1,lr                 ;1155
000080  6301              STR      r1,[r0,#0x30]         ;1155
000082  2120              MOVS     r1,#0x20              ;1156
000084  230e              MOVS     r3,#0xe               ;1157
000086  e00d              B        |L15.164|
                  |L15.136|
000088  2128              MOVS     r1,#0x28              ;1161
00008a  230f              MOVS     r3,#0xf               ;1162
00008c  e00a              B        |L15.164|
                  |L15.142|
;;;1169               }
;;;1170   
;;;1171               break;
;;;1172   
;;;1173           case UI2C_PROTSTS_NACKIF_Msk:
;;;1174               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00008e  2701              MOVS     r7,#1
000090  490e              LDR      r1,|L15.204|
000092  02bf              LSLS     r7,r7,#10
000094  624f              STR      r7,[r1,#0x24]
;;;1175   
;;;1176               if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000096  2b0c              CMP      r3,#0xc
000098  d00f              BEQ      |L15.186|
;;;1177               {
;;;1178                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1179                   u8Err = 1;
;;;1180               }
;;;1181               else
;;;1182               {
;;;1183                   u8rData = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
00009a  6b41              LDR      r1,[r0,#0x34]
00009c  b2cd              UXTB     r5,r1
;;;1184                   u8Ctrl = I2C_CTL_STO_SI;
00009e  2118              MOVS     r1,#0x18
;;;1185                   u8Xfering = 0;
0000a0  2200              MOVS     r2,#0
0000a2  4694              MOV      r12,r2
                  |L15.164|
;;;1186               }
;;;1187   
;;;1188               break;
;;;1189   
;;;1190           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1191           default:                                                        /* Unknow status */
;;;1192               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1193               u8Err = 1;
;;;1194               break;
;;;1195           }
;;;1196   
;;;1197           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000a4  6dc7              LDR      r7,[r0,#0x5c]
0000a6  222e              MOVS     r2,#0x2e
0000a8  4397              BICS     r7,r7,r2
0000aa  430f              ORRS     r7,r7,r1
0000ac  65c7              STR      r7,[r0,#0x5c]
0000ae  4661              MOV      r1,r12                ;1127
0000b0  2900              CMP      r1,#0                 ;1127
0000b2  d005              BEQ      |L15.192|
0000b4  2c00              CMP      r4,#0                 ;1127
0000b6  d0b1              BEQ      |L15.28|
0000b8  e004              B        |L15.196|
                  |L15.186|
0000ba  2124              MOVS     r1,#0x24              ;1178
0000bc  2401              MOVS     r4,#1                 ;1179
0000be  e7f1              B        |L15.164|
                  |L15.192|
;;;1198       }
;;;1199   
;;;1200       if (u8Err)
0000c0  2c00              CMP      r4,#0
0000c2  d000              BEQ      |L15.198|
                  |L15.196|
;;;1201           u8rData = 0;                                                 /* If occurs error, return 0 */
0000c4  2500              MOVS     r5,#0
                  |L15.198|
;;;1202   
;;;1203       return u8rData;                                                  /* Return read data */
0000c6  4628              MOV      r0,r5
;;;1204   }
0000c8  bdf0              POP      {r4-r7,pc}
;;;1205   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L15.204|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadByteTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_ReadByteTwoRegs PROC
;;;1326     */
;;;1327   uint8_t UI2C_ReadByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1328   {
000002  4696              MOV      lr,r2
000004  460a              MOV      r2,r1
;;;1329       uint8_t u8Xfering = 1, u8Err = 0, u8rData = 0, u8Ctrl = 0;
000006  2500              MOVS     r5,#0
000008  2101              MOVS     r1,#1
;;;1330       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1331   
;;;1332       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  468c              MOV      r12,r1                ;1329
00000e  462e              MOV      r6,r5                 ;1329
000010  462c              MOV      r4,r5                 ;1329
000012  2312              MOVS     r3,#0x12              ;1330
000014  2120              MOVS     r1,#0x20
000016  438f              BICS     r7,r7,r1
000018  2108              MOVS     r1,#8
00001a  430f              ORRS     r7,r7,r1
00001c  65c7              STR      r7,[r0,#0x5c]
;;;1333   
;;;1334       while (u8Xfering && (u8Err == 0))
;;;1335       {
;;;1336           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1337   
;;;1338           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1339           {
;;;1340           case UI2C_PROTSTS_STARIF_Msk:
;;;1341               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1342   
;;;1343               if (eEvent == MASTER_SEND_START)
;;;1344               {
;;;1345                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);        /* Write SLA+W to Register UI2C_TXDAT */
00001e  0051              LSLS     r1,r2,#1
                  |L16.32|
000020  6e47              LDR      r7,[r0,#0x64]         ;1336
000022  04bf              LSLS     r7,r7,#18             ;1336
000024  0ebf              LSRS     r7,r7,#26             ;1336
000026  d0fb              BEQ      |L16.32|
000028  6e47              LDR      r7,[r0,#0x64]         ;1338
00002a  223f              MOVS     r2,#0x3f              ;1338
00002c  0212              LSLS     r2,r2,#8              ;1338
00002e  4017              ANDS     r7,r7,r2              ;1338
000030  3fff              SUBS     r7,r7,#0xff           ;1338
000032  1e7f              SUBS     r7,r7,#1              ;1338
000034  d014              BEQ      |L16.96|
000036  2203              MOVS     r2,#3                 ;1338
000038  0212              LSLS     r2,r2,#8              ;1338
00003a  1abf              SUBS     r7,r7,r2              ;1338
00003c  d030              BEQ      |L16.160|
00003e  2207              MOVS     r2,#7                 ;1338
000040  0292              LSLS     r2,r2,#10             ;1338
000042  4297              CMP      r7,r2                 ;1338
000044  d146              BNE      |L16.212|
;;;1346                   eEvent = MASTER_SEND_ADDRESS;
;;;1347               }
;;;1348               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1349               {
;;;1350                   UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1351                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1352               }
;;;1353   
;;;1354               u8Ctrl = UI2C_CTL_PTRG;
;;;1355               break;
;;;1356   
;;;1357           case UI2C_PROTSTS_ACKIF_Msk:
;;;1358               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000046  2201              MOVS     r2,#1
000048  4f26              LDR      r7,|L16.228|
00004a  0352              LSLS     r2,r2,#13
00004c  627a              STR      r2,[r7,#0x24]
;;;1359   
;;;1360               if (eEvent == MASTER_SEND_ADDRESS)
00004e  2b0a              CMP      r3,#0xa
000050  d019              BEQ      |L16.134|
;;;1361               {
;;;1362                   UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte address of register */
;;;1363                   eEvent = MASTER_SEND_H_WR_ADDRESS;
;;;1364               }
;;;1365               else if (eEvent == MASTER_SEND_H_WR_ADDRESS)
000052  2b0b              CMP      r3,#0xb
000054  d01c              BEQ      |L16.144|
;;;1366               {
;;;1367                   UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));       /* Write Lo byte address of register */
;;;1368                   eEvent = MASTER_SEND_L_ADDRESS;
;;;1369               }
;;;1370               else if (eEvent == MASTER_SEND_L_ADDRESS)
000056  2b0d              CMP      r3,#0xd
000058  d01f              BEQ      |L16.154|
;;;1371               {
;;;1372                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1373                   eEvent = MASTER_SEND_REPEAT_START;
;;;1374               }
;;;1375               else
;;;1376               {
;;;1377                   /* SLA+R ACK */
;;;1378                   u8Ctrl = UI2C_CTL_PTRG;
00005a  2420              MOVS     r4,#0x20
;;;1379                   eEvent = MASTER_READ_DATA;
00005c  2310              MOVS     r3,#0x10
00005e  e02e              B        |L16.190|
                  |L16.96|
000060  27ff              MOVS     r7,#0xff              ;1341
000062  4c20              LDR      r4,|L16.228|
000064  3701              ADDS     r7,#1                 ;1341
000066  6267              STR      r7,[r4,#0x24]         ;1341
000068  2b12              CMP      r3,#0x12              ;1343
00006a  d002              BEQ      |L16.114|
00006c  2b0f              CMP      r3,#0xf               ;1348
00006e  d003              BEQ      |L16.120|
000070  e007              B        |L16.130|
                  |L16.114|
000072  6301              STR      r1,[r0,#0x30]         ;1345
000074  230a              MOVS     r3,#0xa               ;1346
000076  e004              B        |L16.130|
                  |L16.120|
000078  4b1a              LDR      r3,|L16.228|
00007a  1c4a              ADDS     r2,r1,#1              ;1350
00007c  3b40              SUBS     r3,r3,#0x40           ;1350
00007e  631a              STR      r2,[r3,#0x30]         ;1350
000080  230c              MOVS     r3,#0xc               ;1351
                  |L16.130|
000082  2420              MOVS     r4,#0x20              ;1354
000084  e01b              B        |L16.190|
                  |L16.134|
000086  4672              MOV      r2,lr                 ;1362
000088  0a12              LSRS     r2,r2,#8              ;1362
00008a  6302              STR      r2,[r0,#0x30]         ;1362
00008c  230b              MOVS     r3,#0xb               ;1363
00008e  e016              B        |L16.190|
                  |L16.144|
000090  4672              MOV      r2,lr                 ;1367
000092  b2d2              UXTB     r2,r2                 ;1367
000094  6302              STR      r2,[r0,#0x30]         ;1367
000096  230d              MOVS     r3,#0xd               ;1368
000098  e011              B        |L16.190|
                  |L16.154|
00009a  2428              MOVS     r4,#0x28              ;1372
00009c  230f              MOVS     r3,#0xf               ;1373
00009e  e00e              B        |L16.190|
                  |L16.160|
;;;1380               }
;;;1381   
;;;1382               break;
;;;1383   
;;;1384           case UI2C_PROTSTS_NACKIF_Msk:
;;;1385               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000a0  2701              MOVS     r7,#1
0000a2  4c10              LDR      r4,|L16.228|
0000a4  02bf              LSLS     r7,r7,#10
0000a6  6267              STR      r7,[r4,#0x24]
;;;1386   
;;;1387               if ((eEvent == MASTER_SEND_H_RD_ADDRESS) || (eEvent == MASTER_SEND_H_WR_ADDRESS) || (eEvent == MASTER_SEND_L_ADDRESS))
0000a8  2b0c              CMP      r3,#0xc
0000aa  d013              BEQ      |L16.212|
0000ac  2b0b              CMP      r3,#0xb
0000ae  d011              BEQ      |L16.212|
0000b0  2b0d              CMP      r3,#0xd
0000b2  d00f              BEQ      |L16.212|
;;;1388               {
;;;1389                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1390                   u8Err = 1;
;;;1391               }
;;;1392               else
;;;1393               {
;;;1394                   u8rData = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
0000b4  6b42              LDR      r2,[r0,#0x34]
;;;1395                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
0000b6  2424              MOVS     r4,#0x24
0000b8  b2d6              UXTB     r6,r2                 ;1394
;;;1396                   u8Xfering = 0;
0000ba  2200              MOVS     r2,#0
0000bc  4694              MOV      r12,r2
                  |L16.190|
;;;1397               }
;;;1398   
;;;1399               break;
;;;1400   
;;;1401           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1402           default:                                                        /* Unknow status */
;;;1403               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1404               u8Err = 1;
;;;1405               break;
;;;1406           }
;;;1407   
;;;1408           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000be  6dc7              LDR      r7,[r0,#0x5c]
0000c0  222e              MOVS     r2,#0x2e
0000c2  4397              BICS     r7,r7,r2
0000c4  4327              ORRS     r7,r7,r4
0000c6  65c7              STR      r7,[r0,#0x5c]
0000c8  4662              MOV      r2,r12                ;1334
0000ca  2a00              CMP      r2,#0                 ;1334
0000cc  d005              BEQ      |L16.218|
0000ce  2d00              CMP      r5,#0                 ;1334
0000d0  d0a6              BEQ      |L16.32|
0000d2  e004              B        |L16.222|
                  |L16.212|
0000d4  2424              MOVS     r4,#0x24              ;1389
0000d6  2501              MOVS     r5,#1                 ;1390
0000d8  e7f1              B        |L16.190|
                  |L16.218|
;;;1409       }
;;;1410   
;;;1411       if (u8Err)
0000da  2d00              CMP      r5,#0
0000dc  d000              BEQ      |L16.224|
                  |L16.222|
;;;1412           u8rData = 0;                                                 /* If occurs error, return 0 */
0000de  2600              MOVS     r6,#0
                  |L16.224|
;;;1413   
;;;1414       return u8rData;                                                  /* Return read data */
0000e0  4630              MOV      r0,r6
;;;1415   }
0000e2  bdf0              POP      {r4-r7,pc}
;;;1416   
                          ENDP

                  |L16.228|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadMultiBytes||, CODE, READONLY, ALIGN=2

                  UI2C_ReadMultiBytes PROC
;;;1034     */
;;;1035   uint32_t UI2C_ReadMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t *pu8rData, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1036   {
000002  4694              MOV      r12,r2
;;;1037       uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000004  2600              MOVS     r6,#0
000006  2701              MOVS     r7,#1
;;;1038       uint32_t u32rxLen = 0;
;;;1039       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1040   
;;;1041       UI2C_START(ui2c);                                                       /* Send START */
000008  6dc2              LDR      r2,[r0,#0x5c]
00000a  468e              MOV      lr,r1                 ;1036
00000c  4633              MOV      r3,r6                 ;1038
00000e  2512              MOVS     r5,#0x12              ;1039
000010  2420              MOVS     r4,#0x20
000012  43a2              BICS     r2,r2,r4
000014  2408              MOVS     r4,#8
000016  4322              ORRS     r2,r2,r4
000018  65c2              STR      r2,[r0,#0x5c]
                  |L17.26|
;;;1042   
;;;1043       while (u8Xfering && (u8Err == 0))
;;;1044       {
;;;1045           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L17.26|
;;;1046   
;;;1047           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000022  6e42              LDR      r2,[r0,#0x64]
000024  243f              MOVS     r4,#0x3f
000026  0224              LSLS     r4,r4,#8
000028  4022              ANDS     r2,r2,r4
00002a  3aff              SUBS     r2,r2,#0xff
00002c  1e52              SUBS     r2,r2,#1
00002e  d017              BEQ      |L17.96|
000030  2403              MOVS     r4,#3
000032  0224              LSLS     r4,r4,#8
000034  1b12              SUBS     r2,r2,r4
000036  d021              BEQ      |L17.124|
000038  2407              MOVS     r4,#7
00003a  02a4              LSLS     r4,r4,#10
00003c  42a2              CMP      r2,r4
00003e  d135              BNE      |L17.172|
;;;1048           {
;;;1049           case UI2C_PROTSTS_STARIF_Msk:
;;;1050               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1051               UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x01);             /* Write SLA+R to Register UI2C_TXDAT */
;;;1052               eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1053               u8Ctrl = UI2C_CTL_PTRG;
;;;1054               break;
;;;1055   
;;;1056           case UI2C_PROTSTS_ACKIF_Msk:
;;;1057               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000040  2401              MOVS     r4,#1
000042  4a1c              LDR      r2,|L17.180|
000044  0364              LSLS     r4,r4,#13
000046  6254              STR      r4,[r2,#0x24]
;;;1058   
;;;1059               if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000048  2d0c              CMP      r5,#0xc
00004a  d014              BEQ      |L17.118|
;;;1060               {
;;;1061                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1062                   eEvent = MASTER_READ_DATA;
;;;1063               }
;;;1064               else
;;;1065               {
;;;1066                   pu8rData[u32rxLen++] = (unsigned char) UI2C_GET_DATA(ui2c);    /* Receive Data */
00004c  6b42              LDR      r2,[r0,#0x34]
00004e  4664              MOV      r4,r12
000050  54e2              STRB     r2,[r4,r3]
;;;1067   
;;;1068                   if (u32rxLen < (u32rLen - 1))
000052  9a03              LDR      r2,[sp,#0xc]
000054  1c5b              ADDS     r3,r3,#1
000056  1e52              SUBS     r2,r2,#1
000058  4293              CMP      r3,r2
00005a  d20a              BCS      |L17.114|
;;;1069                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
00005c  2422              MOVS     r4,#0x22
00005e  e019              B        |L17.148|
                  |L17.96|
000060  22ff              MOVS     r2,#0xff              ;1050
000062  4914              LDR      r1,|L17.180|
000064  3201              ADDS     r2,#1                 ;1050
000066  624a              STR      r2,[r1,#0x24]         ;1050
000068  4671              MOV      r1,lr                 ;1051
00006a  0049              LSLS     r1,r1,#1              ;1051
00006c  1c49              ADDS     r1,r1,#1              ;1051
00006e  6301              STR      r1,[r0,#0x30]         ;1051
000070  250c              MOVS     r5,#0xc               ;1052
                  |L17.114|
;;;1070                   else
;;;1071                       u8Ctrl = UI2C_CTL_PTRG;
000072  2420              MOVS     r4,#0x20
000074  e00e              B        |L17.148|
                  |L17.118|
000076  2422              MOVS     r4,#0x22              ;1061
000078  2510              MOVS     r5,#0x10              ;1062
00007a  e00b              B        |L17.148|
                  |L17.124|
;;;1072               }
;;;1073   
;;;1074               break;
;;;1075   
;;;1076           case UI2C_PROTSTS_NACKIF_Msk:
;;;1077               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00007c  2401              MOVS     r4,#1
00007e  4a0d              LDR      r2,|L17.180|
000080  02a4              LSLS     r4,r4,#10
000082  6254              STR      r4,[r2,#0x24]
;;;1078   
;;;1079               if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000084  2d0c              CMP      r5,#0xc
000086  d011              BEQ      |L17.172|
;;;1080               {
;;;1081                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1082                   u8Err = 1;
;;;1083               }
;;;1084               else
;;;1085               {
;;;1086                   pu8rData[u32rxLen++] = (unsigned char) UI2C_GET_DATA(ui2c);    /* Receive Data */
000088  6b41              LDR      r1,[r0,#0x34]
00008a  4662              MOV      r2,r12
00008c  54d1              STRB     r1,[r2,r3]
;;;1087                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
00008e  2424              MOVS     r4,#0x24
;;;1088                   u8Xfering = 0;
000090  2700              MOVS     r7,#0
000092  1c5b              ADDS     r3,r3,#1
                  |L17.148|
;;;1089               }
;;;1090   
;;;1091               break;
;;;1092   
;;;1093           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1094           default:                                                        /* Unknow status */
;;;1095               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1096               u8Err = 1;
;;;1097               break;
;;;1098           }
;;;1099   
;;;1100           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000094  6dc1              LDR      r1,[r0,#0x5c]
000096  222e              MOVS     r2,#0x2e
000098  4391              BICS     r1,r1,r2
00009a  4321              ORRS     r1,r1,r4
00009c  65c1              STR      r1,[r0,#0x5c]
00009e  2f00              CMP      r7,#0                 ;1043
0000a0  d001              BEQ      |L17.166|
0000a2  2e00              CMP      r6,#0                 ;1043
0000a4  d0b9              BEQ      |L17.26|
                  |L17.166|
;;;1101       }
;;;1102   
;;;1103       return u32rxLen;                                                        /* Return bytes length that have been received */
0000a6  4618              MOV      r0,r3
;;;1104   }
0000a8  b004              ADD      sp,sp,#0x10
0000aa  bdf0              POP      {r4-r7,pc}
                  |L17.172|
0000ac  2424              MOVS     r4,#0x24              ;1081
0000ae  2601              MOVS     r6,#1                 ;1082
0000b0  e7f0              B        |L17.148|
;;;1105   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L17.180|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadMultiBytesOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_ReadMultiBytesOneReg PROC
;;;1220     */
;;;1221   uint32_t UI2C_ReadMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t *pu8rData, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1222   {
000002  469e              MOV      lr,r3
;;;1223       uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000004  2201              MOVS     r2,#1
000006  2500              MOVS     r5,#0
000008  4694              MOV      r12,r2
;;;1224       uint32_t u32rxLen = 0;
;;;1225       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1226   
;;;1227       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc3              LDR      r3,[r0,#0x5c]
00000c  462c              MOV      r4,r5                 ;1224
00000e  2212              MOVS     r2,#0x12              ;1225
000010  2620              MOVS     r6,#0x20
000012  43b3              BICS     r3,r3,r6
000014  2608              MOVS     r6,#8
000016  4333              ORRS     r3,r3,r6
000018  65c3              STR      r3,[r0,#0x5c]
;;;1228   
;;;1229       while (u8Xfering && (u8Err == 0))
;;;1230       {
;;;1231           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1232   
;;;1233           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1234           {
;;;1235           case UI2C_PROTSTS_STARIF_Msk:
;;;1236               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1237   
;;;1238               if (eEvent == MASTER_SEND_START)
;;;1239               {
;;;1240                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);         /* Write SLA+W to Register UI2C_TXDAT */
00001a  004e              LSLS     r6,r1,#1
                  |L18.28|
00001c  6e41              LDR      r1,[r0,#0x64]         ;1231
00001e  0489              LSLS     r1,r1,#18             ;1231
000020  0e89              LSRS     r1,r1,#26             ;1231
000022  d0fb              BEQ      |L18.28|
000024  6e41              LDR      r1,[r0,#0x64]         ;1233
000026  273f              MOVS     r7,#0x3f              ;1233
000028  023f              LSLS     r7,r7,#8              ;1233
00002a  4039              ANDS     r1,r1,r7              ;1233
00002c  39ff              SUBS     r1,r1,#0xff           ;1233
00002e  1e49              SUBS     r1,r1,#1              ;1233
000030  d01b              BEQ      |L18.106|
000032  2703              MOVS     r7,#3                 ;1233
000034  023f              LSLS     r7,r7,#8              ;1233
000036  1bc9              SUBS     r1,r1,r7              ;1233
000038  d035              BEQ      |L18.166|
00003a  2707              MOVS     r7,#7                 ;1233
00003c  02bf              LSLS     r7,r7,#10             ;1233
00003e  42b9              CMP      r1,r7                 ;1233
000040  d14b              BNE      |L18.218|
;;;1241                   eEvent = MASTER_SEND_ADDRESS;
;;;1242               }
;;;1243               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1244               {
;;;1245                   UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1246                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1247               }
;;;1248   
;;;1249               u8Ctrl = UI2C_CTL_PTRG;
;;;1250               break;
;;;1251   
;;;1252           case UI2C_PROTSTS_ACKIF_Msk:
;;;1253               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  4926              LDR      r1,|L18.224|
000046  037f              LSLS     r7,r7,#13
000048  624f              STR      r7,[r1,#0x24]
;;;1254   
;;;1255               if (eEvent == MASTER_SEND_ADDRESS)
00004a  2a0a              CMP      r2,#0xa
00004c  d020              BEQ      |L18.144|
;;;1256               {
;;;1257                   UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address of register */
;;;1258                   u8Ctrl = UI2C_CTL_PTRG;
;;;1259                   eEvent = MASTER_SEND_DATA;
;;;1260               }
;;;1261               else if (eEvent == MASTER_SEND_DATA)
00004e  2a0e              CMP      r2,#0xe
000050  d023              BEQ      |L18.154|
;;;1262               {
;;;1263                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1264                   eEvent = MASTER_SEND_REPEAT_START;
;;;1265               }
;;;1266               else if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000052  2a0c              CMP      r2,#0xc
000054  d024              BEQ      |L18.160|
;;;1267               {
;;;1268                   /* SLA+R ACK */
;;;1269                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1270                   eEvent = MASTER_READ_DATA;
;;;1271               }
;;;1272               else
;;;1273               {
;;;1274                   pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
000056  6b41              LDR      r1,[r0,#0x34]
000058  4673              MOV      r3,lr
00005a  5519              STRB     r1,[r3,r4]
;;;1275   
;;;1276                   if (u32rxLen < u32rLen - 1)
00005c  9909              LDR      r1,[sp,#0x24]
00005e  1c64              ADDS     r4,r4,#1
000060  1e49              SUBS     r1,r1,#1
000062  428c              CMP      r4,r1
000064  d212              BCS      |L18.140|
;;;1277                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
000066  2122              MOVS     r1,#0x22
000068  e02a              B        |L18.192|
                  |L18.106|
00006a  27ff              MOVS     r7,#0xff              ;1236
00006c  491c              LDR      r1,|L18.224|
00006e  3701              ADDS     r7,#1                 ;1236
000070  624f              STR      r7,[r1,#0x24]         ;1236
000072  2a12              CMP      r2,#0x12              ;1238
000074  d002              BEQ      |L18.124|
000076  2a0f              CMP      r2,#0xf               ;1243
000078  d003              BEQ      |L18.130|
00007a  e007              B        |L18.140|
                  |L18.124|
00007c  6306              STR      r6,[r0,#0x30]         ;1240
00007e  220a              MOVS     r2,#0xa               ;1241
000080  e004              B        |L18.140|
                  |L18.130|
000082  4a17              LDR      r2,|L18.224|
000084  1c71              ADDS     r1,r6,#1              ;1245
000086  3a40              SUBS     r2,r2,#0x40           ;1245
000088  6311              STR      r1,[r2,#0x30]         ;1245
00008a  220c              MOVS     r2,#0xc               ;1246
                  |L18.140|
;;;1278                   else
;;;1279                       u8Ctrl = UI2C_CTL_PTRG;
00008c  2120              MOVS     r1,#0x20
00008e  e017              B        |L18.192|
                  |L18.144|
000090  9902              LDR      r1,[sp,#8]            ;1257
000092  6301              STR      r1,[r0,#0x30]         ;1257
000094  2120              MOVS     r1,#0x20              ;1258
000096  220e              MOVS     r2,#0xe               ;1259
000098  e012              B        |L18.192|
                  |L18.154|
00009a  2128              MOVS     r1,#0x28              ;1263
00009c  220f              MOVS     r2,#0xf               ;1264
00009e  e00f              B        |L18.192|
                  |L18.160|
0000a0  2122              MOVS     r1,#0x22              ;1269
0000a2  2210              MOVS     r2,#0x10              ;1270
0000a4  e00c              B        |L18.192|
                  |L18.166|
;;;1280               }
;;;1281   
;;;1282               break;
;;;1283   
;;;1284           case UI2C_PROTSTS_NACKIF_Msk:
;;;1285               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000a6  2701              MOVS     r7,#1
0000a8  490d              LDR      r1,|L18.224|
0000aa  02bf              LSLS     r7,r7,#10
0000ac  624f              STR      r7,[r1,#0x24]
;;;1286   
;;;1287               if (eEvent == MASTER_SEND_H_RD_ADDRESS)
0000ae  2a0c              CMP      r2,#0xc
0000b0  d013              BEQ      |L18.218|
;;;1288               {
;;;1289                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1290                   u8Err = 1;
;;;1291               }
;;;1292               else
;;;1293               {
;;;1294                   pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
0000b2  6b41              LDR      r1,[r0,#0x34]
0000b4  4673              MOV      r3,lr
0000b6  5519              STRB     r1,[r3,r4]
;;;1295                   u8Ctrl = I2C_CTL_STO_SI;
;;;1296                   u8Xfering = 0;
0000b8  2300              MOVS     r3,#0
0000ba  2118              MOVS     r1,#0x18              ;1295
0000bc  469c              MOV      r12,r3
0000be  1c64              ADDS     r4,r4,#1
                  |L18.192|
;;;1297               }
;;;1298   
;;;1299               break;
;;;1300   
;;;1301           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1302           default:                                                        /* Unknow status */
;;;1303               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1304               u8Err = 1;
;;;1305               break;
;;;1306           }
;;;1307   
;;;1308           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000c0  6dc7              LDR      r7,[r0,#0x5c]
0000c2  232e              MOVS     r3,#0x2e
0000c4  439f              BICS     r7,r7,r3
0000c6  430f              ORRS     r7,r7,r1
0000c8  65c7              STR      r7,[r0,#0x5c]
0000ca  4661              MOV      r1,r12                ;1229
0000cc  2900              CMP      r1,#0                 ;1229
0000ce  d001              BEQ      |L18.212|
0000d0  2d00              CMP      r5,#0                 ;1229
0000d2  d0a3              BEQ      |L18.28|
                  |L18.212|
;;;1309       }
;;;1310   
;;;1311       return u32rxLen;                                               /* Return bytes length that have been received */
0000d4  4620              MOV      r0,r4
;;;1312   }
0000d6  b004              ADD      sp,sp,#0x10
0000d8  bdf0              POP      {r4-r7,pc}
                  |L18.218|
0000da  2124              MOVS     r1,#0x24              ;1289
0000dc  2501              MOVS     r5,#1                 ;1290
0000de  e7ef              B        |L18.192|
;;;1313   
                          ENDP

                  |L18.224|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadMultiBytesTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_ReadMultiBytesTwoRegs PROC
;;;1431     */
;;;1432   uint32_t UI2C_ReadMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t *pu8rData, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1433   {
000002  4696              MOV      lr,r2
000004  460a              MOV      r2,r1
;;;1434       uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000006  2600              MOVS     r6,#0
000008  2101              MOVS     r1,#1
;;;1435       uint32_t u32rxLen = 0;
;;;1436       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1437   
;;;1438       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  468c              MOV      r12,r1                ;1434
00000e  4634              MOV      r4,r6                 ;1434
000010  4635              MOV      r5,r6                 ;1435
000012  2312              MOVS     r3,#0x12              ;1436
000014  2120              MOVS     r1,#0x20
000016  438f              BICS     r7,r7,r1
000018  2108              MOVS     r1,#8
00001a  430f              ORRS     r7,r7,r1
00001c  65c7              STR      r7,[r0,#0x5c]
;;;1439   
;;;1440       while (u8Xfering && (u8Err == 0))
;;;1441       {
;;;1442           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1443   
;;;1444           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1445           {
;;;1446           case UI2C_PROTSTS_STARIF_Msk:
;;;1447               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1448   
;;;1449               if (eEvent == MASTER_SEND_START)
;;;1450               {
;;;1451                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);         /* Write SLA+W to Register UI2C_TXDAT */
00001e  0051              LSLS     r1,r2,#1
                  |L19.32|
000020  6e47              LDR      r7,[r0,#0x64]         ;1442
000022  04bf              LSLS     r7,r7,#18             ;1442
000024  0ebf              LSRS     r7,r7,#26             ;1442
000026  d0fb              BEQ      |L19.32|
000028  6e47              LDR      r7,[r0,#0x64]         ;1444
00002a  223f              MOVS     r2,#0x3f              ;1444
00002c  0212              LSLS     r2,r2,#8              ;1444
00002e  4017              ANDS     r7,r7,r2              ;1444
000030  3fff              SUBS     r7,r7,#0xff           ;1444
000032  1e7f              SUBS     r7,r7,#1              ;1444
000034  d01d              BEQ      |L19.114|
000036  2203              MOVS     r2,#3                 ;1444
000038  0212              LSLS     r2,r2,#8              ;1444
00003a  1abf              SUBS     r7,r7,r2              ;1444
00003c  d03c              BEQ      |L19.184|
00003e  2207              MOVS     r2,#7                 ;1444
000040  0292              LSLS     r2,r2,#10             ;1444
000042  4297              CMP      r7,r2                 ;1444
000044  d156              BNE      |L19.244|
;;;1452                   eEvent = MASTER_SEND_ADDRESS;
;;;1453               }
;;;1454               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1455               {
;;;1456                   UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1457                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1458               }
;;;1459   
;;;1460               u8Ctrl = UI2C_CTL_PTRG;
;;;1461               break;
;;;1462   
;;;1463           case UI2C_PROTSTS_ACKIF_Msk:
;;;1464               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000046  2201              MOVS     r2,#1
000048  4f2c              LDR      r7,|L19.252|
00004a  0352              LSLS     r2,r2,#13
00004c  627a              STR      r2,[r7,#0x24]
;;;1465   
;;;1466               if (eEvent == MASTER_SEND_ADDRESS)
00004e  2b0a              CMP      r3,#0xa
000050  d022              BEQ      |L19.152|
;;;1467               {
;;;1468                   UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte address of register */
;;;1469                   eEvent = MASTER_SEND_H_WR_ADDRESS;
;;;1470               }
;;;1471               else if (eEvent == MASTER_SEND_H_WR_ADDRESS)
000052  2b0b              CMP      r3,#0xb
000054  d025              BEQ      |L19.162|
;;;1472               {
;;;1473                   UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));       /* Write Lo byte address of register */
;;;1474                   eEvent = MASTER_SEND_L_ADDRESS;
;;;1475               }
;;;1476               else if (eEvent == MASTER_SEND_L_ADDRESS)
000056  2b0d              CMP      r3,#0xd
000058  d028              BEQ      |L19.172|
;;;1477               {
;;;1478                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1479                   eEvent = MASTER_SEND_REPEAT_START;
;;;1480               }
;;;1481               else if (eEvent == MASTER_SEND_H_RD_ADDRESS)
00005a  2b0c              CMP      r3,#0xc
00005c  d029              BEQ      |L19.178|
;;;1482               {
;;;1483                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1484                   eEvent = MASTER_READ_DATA;
;;;1485               }
;;;1486               else
;;;1487               {
;;;1488                   pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
00005e  6b44              LDR      r4,[r0,#0x34]
000060  9f03              LDR      r7,[sp,#0xc]
000062  557c              STRB     r4,[r7,r5]
;;;1489   
;;;1490                   if (u32rxLen < u32rLen - 1)
000064  9c09              LDR      r4,[sp,#0x24]
000066  1c6d              ADDS     r5,r5,#1
000068  1e64              SUBS     r4,r4,#1
00006a  42a5              CMP      r5,r4
00006c  d212              BCS      |L19.148|
;;;1491                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
00006e  2422              MOVS     r4,#0x22
000070  e033              B        |L19.218|
                  |L19.114|
000072  27ff              MOVS     r7,#0xff              ;1447
000074  4c21              LDR      r4,|L19.252|
000076  3701              ADDS     r7,#1                 ;1447
000078  6267              STR      r7,[r4,#0x24]         ;1447
00007a  2b12              CMP      r3,#0x12              ;1449
00007c  d002              BEQ      |L19.132|
00007e  2b0f              CMP      r3,#0xf               ;1454
000080  d003              BEQ      |L19.138|
000082  e007              B        |L19.148|
                  |L19.132|
000084  6301              STR      r1,[r0,#0x30]         ;1451
000086  230a              MOVS     r3,#0xa               ;1452
000088  e004              B        |L19.148|
                  |L19.138|
00008a  4b1c              LDR      r3,|L19.252|
00008c  1c4a              ADDS     r2,r1,#1              ;1456
00008e  3b40              SUBS     r3,r3,#0x40           ;1456
000090  631a              STR      r2,[r3,#0x30]         ;1456
000092  230c              MOVS     r3,#0xc               ;1457
                  |L19.148|
;;;1492                   else
;;;1493                       u8Ctrl = UI2C_CTL_PTRG;
000094  2420              MOVS     r4,#0x20
000096  e020              B        |L19.218|
                  |L19.152|
000098  4672              MOV      r2,lr                 ;1468
00009a  0a12              LSRS     r2,r2,#8              ;1468
00009c  6302              STR      r2,[r0,#0x30]         ;1468
00009e  230b              MOVS     r3,#0xb               ;1469
0000a0  e01b              B        |L19.218|
                  |L19.162|
0000a2  4672              MOV      r2,lr                 ;1473
0000a4  b2d2              UXTB     r2,r2                 ;1473
0000a6  6302              STR      r2,[r0,#0x30]         ;1473
0000a8  230d              MOVS     r3,#0xd               ;1474
0000aa  e016              B        |L19.218|
                  |L19.172|
0000ac  2428              MOVS     r4,#0x28              ;1478
0000ae  230f              MOVS     r3,#0xf               ;1479
0000b0  e013              B        |L19.218|
                  |L19.178|
0000b2  2422              MOVS     r4,#0x22              ;1483
0000b4  2310              MOVS     r3,#0x10              ;1484
0000b6  e010              B        |L19.218|
                  |L19.184|
;;;1494               }
;;;1495   
;;;1496               break;
;;;1497   
;;;1498           case UI2C_PROTSTS_NACKIF_Msk:
;;;1499               UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000b8  2701              MOVS     r7,#1
0000ba  4c10              LDR      r4,|L19.252|
0000bc  02bf              LSLS     r7,r7,#10
0000be  6267              STR      r7,[r4,#0x24]
;;;1500   
;;;1501               if ((eEvent == MASTER_SEND_H_RD_ADDRESS) || (eEvent == MASTER_SEND_H_WR_ADDRESS) || (eEvent == MASTER_SEND_L_ADDRESS))
0000c0  2b0c              CMP      r3,#0xc
0000c2  d017              BEQ      |L19.244|
0000c4  2b0b              CMP      r3,#0xb
0000c6  d015              BEQ      |L19.244|
0000c8  2b0d              CMP      r3,#0xd
0000ca  d013              BEQ      |L19.244|
;;;1502               {
;;;1503                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1504                   u8Err = 1;
;;;1505               }
;;;1506               else
;;;1507               {
;;;1508                   pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
0000cc  6b42              LDR      r2,[r0,#0x34]
0000ce  9c03              LDR      r4,[sp,#0xc]
0000d0  5562              STRB     r2,[r4,r5]
;;;1509                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1510                   u8Xfering = 0;
0000d2  2200              MOVS     r2,#0
0000d4  2424              MOVS     r4,#0x24              ;1509
0000d6  4694              MOV      r12,r2
0000d8  1c6d              ADDS     r5,r5,#1
                  |L19.218|
;;;1511               }
;;;1512   
;;;1513               break;
;;;1514   
;;;1515           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1516           default:                                                        /* Unknow status */
;;;1517               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1518               u8Err = 1;
;;;1519               break;
;;;1520           }
;;;1521   
;;;1522           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000da  6dc7              LDR      r7,[r0,#0x5c]
0000dc  222e              MOVS     r2,#0x2e
0000de  4397              BICS     r7,r7,r2
0000e0  4327              ORRS     r7,r7,r4
0000e2  65c7              STR      r7,[r0,#0x5c]
0000e4  4662              MOV      r2,r12                ;1440
0000e6  2a00              CMP      r2,#0                 ;1440
0000e8  d001              BEQ      |L19.238|
0000ea  2e00              CMP      r6,#0                 ;1440
0000ec  d098              BEQ      |L19.32|
                  |L19.238|
;;;1523       }
;;;1524   
;;;1525       return u32rxLen;                                                        /* Return bytes length that have been received */
0000ee  4628              MOV      r0,r5
;;;1526   }
0000f0  b004              ADD      sp,sp,#0x10
0000f2  bdf0              POP      {r4-r7,pc}
                  |L19.244|
0000f4  2424              MOVS     r4,#0x24              ;1503
0000f6  2601              MOVS     r6,#1                 ;1504
0000f8  e7ef              B        |L19.218|
;;;1527   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L19.252|
                          DCD      0x40070040

                          AREA ||i.UI2C_SetBusClockFreq||, CODE, READONLY, ALIGN=2

                  UI2C_SetBusClockFreq PROC
;;;252     */
;;;253    uint32_t UI2C_SetBusClockFreq(UI2C_T *ui2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;254    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;255        uint32_t u32ClkDiv;
;;;256        uint32_t u32Pclk;
;;;257    
;;;258        u32Pclk = CLK_GetPCLK0Freq();
000006  f7fffffe          BL       CLK_GetPCLK0Freq
00000a  4605              MOV      r5,r0
;;;259    
;;;260        u32ClkDiv = (uint32_t)((((((u32Pclk / 2) * 10) / (u32BusClock)) + 5) / 10) - 1); /* Compute proper divider for USCI_I2C clock */
00000c  0840              LSRS     r0,r0,#1
00000e  210a              MOVS     r1,#0xa
000010  4348              MULS     r0,r1,r0
000012  4631              MOV      r1,r6
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  1d40              ADDS     r0,r0,#5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;261    
;;;262        /* Set USCI_I2C bus clock */
;;;263        ui2c->BRGEN &= ~UI2C_BRGEN_CLKDIV_Msk;
000020  68a1              LDR      r1,[r4,#8]
000022  4a07              LDR      r2,|L20.64|
000024  4011              ANDS     r1,r1,r2
000026  60a1              STR      r1,[r4,#8]
;;;264        ui2c->BRGEN |= (u32ClkDiv << UI2C_BRGEN_CLKDIV_Pos);
000028  68a1              LDR      r1,[r4,#8]
00002a  1e40              SUBS     r0,r0,#1
00002c  0402              LSLS     r2,r0,#16
00002e  4311              ORRS     r1,r1,r2
000030  60a1              STR      r1,[r4,#8]
;;;265    
;;;266        return (u32Pclk / ((u32ClkDiv + 1) << 1));
000032  0041              LSLS     r1,r0,#1
000034  4628              MOV      r0,r5
000036  1c89              ADDS     r1,r1,#2
000038  f7fffffe          BL       __aeabi_uidivmod
;;;267    }
00003c  bd70              POP      {r4-r6,pc}
;;;268    
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_SetData||, CODE, READONLY, ALIGN=1

                  UI2C_SetData PROC
;;;395     */
;;;396    void UI2C_SetData(UI2C_T *ui2c, uint8_t u8Data)
000000  6301              STR      r1,[r0,#0x30]
;;;397    {
;;;398        ui2c->TXDAT = u8Data;
;;;399    }
000002  4770              BX       lr
;;;400    
                          ENDP


                          AREA ||i.UI2C_SetSlaveAddr||, CODE, READONLY, ALIGN=1

                  UI2C_SetSlaveAddr PROC
;;;414     */
;;;415    void UI2C_SetSlaveAddr(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddr, uint8_t u8GCMode)
000000  2900              CMP      r1,#0
;;;416    {
000002  d001              BEQ      |L22.8|
;;;417        if (u8SlaveNo)
;;;418            ui2c->DEVADDR1  = u16SlaveAddr;
000004  6482              STR      r2,[r0,#0x48]
000006  e000              B        |L22.10|
                  |L22.8|
;;;419        else
;;;420            ui2c->DEVADDR0  = u16SlaveAddr;
000008  6442              STR      r2,[r0,#0x44]
                  |L22.10|
;;;421    
;;;422        ui2c->PROTCTL  = (ui2c->PROTCTL & ~UI2C_PROTCTL_GCFUNC_Msk) | u8GCMode;
00000a  6dc1              LDR      r1,[r0,#0x5c]
00000c  0849              LSRS     r1,r1,#1
00000e  0049              LSLS     r1,r1,#1
000010  4319              ORRS     r1,r1,r3
000012  65c1              STR      r1,[r0,#0x5c]
;;;423    }
000014  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.UI2C_SetSlaveAddrMask||, CODE, READONLY, ALIGN=1

                  UI2C_SetSlaveAddrMask PROC
;;;436     */
;;;437    void UI2C_SetSlaveAddrMask(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddrMask)
000000  2900              CMP      r1,#0
;;;438    {
000002  d001              BEQ      |L23.8|
;;;439        if (u8SlaveNo)
;;;440            ui2c->ADDRMSK1  = u16SlaveAddrMask;
000004  6502              STR      r2,[r0,#0x50]
;;;441        else
;;;442            ui2c->ADDRMSK0  = u16SlaveAddrMask;
;;;443    }
000006  4770              BX       lr
                  |L23.8|
000008  64c2              STR      r2,[r0,#0x4c]         ;442
00000a  4770              BX       lr
;;;444    
                          ENDP


                          AREA ||i.UI2C_Trigger||, CODE, READONLY, ALIGN=1

                  UI2C_Trigger PROC
;;;103     */
;;;104    void UI2C_Trigger(UI2C_T *ui2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Ptrg, uint8_t u8Ack)
000000  b5f0              PUSH     {r4-r7,lr}
;;;105    {
;;;106        uint32_t u32Reg = 0;
;;;107        uint32_t u32Val = ui2c->PROTCTL & ~(UI2C_PROTCTL_STA_Msk | UI2C_PROTCTL_STO_Msk | UI2C_PROTCTL_AA_Msk);
000002  9e05              LDR      r6,[sp,#0x14]
000004  6dc5              LDR      r5,[r0,#0x5c]
000006  2400              MOVS     r4,#0                 ;106
000008  270e              MOVS     r7,#0xe
00000a  43bd              BICS     r5,r5,r7
;;;108    
;;;109        if (u8Start)
00000c  2900              CMP      r1,#0
00000e  d000              BEQ      |L24.18|
;;;110            u32Reg |= UI2C_PROTCTL_STA_Msk;
000010  2408              MOVS     r4,#8
                  |L24.18|
;;;111    
;;;112        if (u8Stop)
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L24.26|
;;;113            u32Reg |= UI2C_PROTCTL_STO_Msk;
000016  2104              MOVS     r1,#4
000018  430c              ORRS     r4,r4,r1
                  |L24.26|
;;;114    
;;;115        if (u8Ptrg)
00001a  2b00              CMP      r3,#0
00001c  d001              BEQ      |L24.34|
;;;116            u32Reg |= UI2C_PROTCTL_PTRG_Msk;
00001e  2120              MOVS     r1,#0x20
000020  430c              ORRS     r4,r4,r1
                  |L24.34|
;;;117    
;;;118        if (u8Ack)
000022  2e00              CMP      r6,#0
000024  d001              BEQ      |L24.42|
;;;119            u32Reg |= UI2C_PROTCTL_AA_Msk;
000026  2102              MOVS     r1,#2
000028  430c              ORRS     r4,r4,r1
                  |L24.42|
;;;120    
;;;121        ui2c->PROTCTL = u32Val | u32Reg;
00002a  4325              ORRS     r5,r5,r4
00002c  65c5              STR      r5,[r0,#0x5c]
;;;122    }
00002e  bdf0              POP      {r4-r7,pc}
;;;123    
                          ENDP


                          AREA ||i.UI2C_WriteByte||, CODE, READONLY, ALIGN=2

                  UI2C_WriteByte PROC
;;;520    
;;;521    uint8_t UI2C_WriteByte(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t u8Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;522    {
000002  468c              MOV      r12,r1
;;;523        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000004  2400              MOVS     r4,#0
000006  2601              MOVS     r6,#1
;;;524        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;525    
;;;526        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;522
00000c  4623              MOV      r3,r4                 ;523
00000e  2512              MOVS     r5,#0x12              ;524
000010  2720              MOVS     r7,#0x20
000012  43b9              BICS     r1,r1,r7
000014  2708              MOVS     r7,#8
000016  4339              ORRS     r1,r1,r7
000018  65c1              STR      r1,[r0,#0x5c]
;;;527    
;;;528        while (u8Xfering && (u8Err == 0))
;;;529        {
;;;530            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;531    
;;;532            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;533            {
;;;534            case UI2C_PROTSTS_STARIF_Msk:
;;;535                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  491d              LDR      r1,|L25.144|
                  |L25.28|
00001c  6e47              LDR      r7,[r0,#0x64]         ;530
00001e  04bf              LSLS     r7,r7,#18             ;530
000020  0ebf              LSRS     r7,r7,#26             ;530
000022  d0fb              BEQ      |L25.28|
000024  6e47              LDR      r7,[r0,#0x64]         ;532
000026  223f              MOVS     r2,#0x3f              ;532
000028  0212              LSLS     r2,r2,#8              ;532
00002a  4017              ANDS     r7,r7,r2              ;532
00002c  3fff              SUBS     r7,r7,#0xff           ;532
00002e  1e7f              SUBS     r7,r7,#1              ;532
000030  d00f              BEQ      |L25.82|
000032  2203              MOVS     r2,#3                 ;532
000034  0212              LSLS     r2,r2,#8              ;532
000036  1abf              SUBS     r7,r7,r2              ;532
000038  d018              BEQ      |L25.108|
00003a  2207              MOVS     r2,#7                 ;532
00003c  0292              LSLS     r2,r2,#10             ;532
00003e  4297              CMP      r7,r2                 ;532
000040  d117              BNE      |L25.114|
;;;536                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;537                eEvent = MASTER_SEND_ADDRESS;
;;;538                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;539                break;
;;;540    
;;;541            case UI2C_PROTSTS_ACKIF_Msk:
;;;542                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  037f              LSLS     r7,r7,#13
000046  624f              STR      r7,[r1,#0x24]
;;;543    
;;;544                if (eEvent == MASTER_SEND_ADDRESS)
000048  2d0a              CMP      r5,#0xa
00004a  d00b              BEQ      |L25.100|
;;;545                {
;;;546                    UI2C_SET_DATA(ui2c, u8Data);                              /* Write data to UI2C_TXDAT */
;;;547                    eEvent = MASTER_SEND_DATA;
;;;548                }
;;;549                else
;;;550                {
;;;551                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
00004c  2324              MOVS     r3,#0x24
;;;552                    u8Xfering = 0;
00004e  2600              MOVS     r6,#0
000050  e011              B        |L25.118|
                  |L25.82|
000052  22ff              MOVS     r2,#0xff              ;535
000054  3201              ADDS     r2,#1                 ;535
000056  624a              STR      r2,[r1,#0x24]         ;535
000058  4662              MOV      r2,r12                ;536
00005a  0052              LSLS     r2,r2,#1              ;536
00005c  6302              STR      r2,[r0,#0x30]         ;536
00005e  250a              MOVS     r5,#0xa               ;537
000060  2320              MOVS     r3,#0x20              ;538
000062  e008              B        |L25.118|
                  |L25.100|
000064  4672              MOV      r2,lr                 ;546
000066  6302              STR      r2,[r0,#0x30]         ;546
000068  250e              MOVS     r5,#0xe               ;547
00006a  e004              B        |L25.118|
                  |L25.108|
;;;553                }
;;;554    
;;;555                break;
;;;556    
;;;557            case UI2C_PROTSTS_NACKIF_Msk:
;;;558                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00006c  2201              MOVS     r2,#1
00006e  0292              LSLS     r2,r2,#10
000070  624a              STR      r2,[r1,#0x24]
                  |L25.114|
;;;559                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;560                u8Err = 1;
;;;561                break;
;;;562    
;;;563            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;564            default:                                                        /* Unknow status */
;;;565                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000072  2324              MOVS     r3,#0x24
;;;566                u8Err = 1;
000074  2401              MOVS     r4,#1
                  |L25.118|
;;;567                break;
;;;568            }
;;;569    
;;;570            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000076  6dc7              LDR      r7,[r0,#0x5c]
000078  222e              MOVS     r2,#0x2e
00007a  4397              BICS     r7,r7,r2
00007c  431f              ORRS     r7,r7,r3
00007e  65c7              STR      r7,[r0,#0x5c]
000080  2e00              CMP      r6,#0                 ;528
000082  d001              BEQ      |L25.136|
000084  2c00              CMP      r4,#0                 ;528
000086  d0c9              BEQ      |L25.28|
                  |L25.136|
000088  4620              MOV      r0,r4                 ;528
;;;571        }
;;;572    
;;;573        return (u8Err | u8Xfering);                                             /* return (Success)/(Fail) status */
00008a  4330              ORRS     r0,r0,r6
;;;574    }
00008c  bdf0              POP      {r4-r7,pc}
;;;575    
                          ENDP

00008e  0000              DCW      0x0000
                  |L25.144|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteByteOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_WriteByteOneReg PROC
;;;655    
;;;656    uint8_t UI2C_WriteByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t u8Data)
000000  b5ff              PUSH     {r0-r7,lr}
;;;657    {
;;;658        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2601              MOVS     r6,#1
000004  468c              MOV      r12,r1                ;657
000006  2500              MOVS     r5,#0
;;;659        uint32_t u32txLen = 0;
;;;660    
;;;661        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;657
00000c  462b              MOV      r3,r5                 ;658
00000e  462c              MOV      r4,r5                 ;659
000010  2720              MOVS     r7,#0x20
000012  43b9              BICS     r1,r1,r7
000014  2708              MOVS     r7,#8
000016  4339              ORRS     r1,r1,r7
000018  65c1              STR      r1,[r0,#0x5c]
;;;662    
;;;663        while (u8Xfering && (u8Err == 0))
;;;664        {
;;;665            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;666    
;;;667            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;668            {
;;;669            case UI2C_PROTSTS_STARIF_Msk:
;;;670                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  4920              LDR      r1,|L26.156|
                  |L26.28|
00001c  6e47              LDR      r7,[r0,#0x64]         ;665
00001e  04bf              LSLS     r7,r7,#18             ;665
000020  0ebf              LSRS     r7,r7,#26             ;665
000022  d0fb              BEQ      |L26.28|
000024  6e47              LDR      r7,[r0,#0x64]         ;667
000026  223f              MOVS     r2,#0x3f              ;667
000028  0212              LSLS     r2,r2,#8              ;667
00002a  4017              ANDS     r7,r7,r2              ;667
00002c  3fff              SUBS     r7,r7,#0xff           ;667
00002e  1e7f              SUBS     r7,r7,#1              ;667
000030  d011              BEQ      |L26.86|
000032  2203              MOVS     r2,#3                 ;667
000034  0212              LSLS     r2,r2,#8              ;667
000036  1abf              SUBS     r7,r7,r2              ;667
000038  d01d              BEQ      |L26.118|
00003a  2207              MOVS     r2,#7                 ;667
00003c  0292              LSLS     r2,r2,#10             ;667
00003e  4297              CMP      r7,r2                 ;667
000040  d11c              BNE      |L26.124|
;;;671                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;672                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;673                break;
;;;674    
;;;675            case UI2C_PROTSTS_ACKIF_Msk:
;;;676                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  037f              LSLS     r7,r7,#13
000046  624f              STR      r7,[r1,#0x24]
;;;677    
;;;678                if (u32txLen == 0)
000048  2c00              CMP      r4,#0
00004a  d00c              BEQ      |L26.102|
;;;679                {
;;;680                    UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address to UI2C_TXDAT */
;;;681                    u32txLen++;
;;;682                }
;;;683                else if (u32txLen == 1)
00004c  2c01              CMP      r4,#1
00004e  d00e              BEQ      |L26.110|
;;;684                {
;;;685                    UI2C_SET_DATA(ui2c, u8Data);                              /* Write data to UI2C_TXDAT */
;;;686                    u32txLen++;
;;;687                }
;;;688                else
;;;689                {
;;;690                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000050  2324              MOVS     r3,#0x24
;;;691                    u8Xfering = 0;
000052  2600              MOVS     r6,#0
000054  e014              B        |L26.128|
                  |L26.86|
000056  22ff              MOVS     r2,#0xff              ;670
000058  3201              ADDS     r2,#1                 ;670
00005a  624a              STR      r2,[r1,#0x24]         ;670
00005c  4662              MOV      r2,r12                ;671
00005e  0052              LSLS     r2,r2,#1              ;671
000060  6302              STR      r2,[r0,#0x30]         ;671
000062  2320              MOVS     r3,#0x20              ;672
000064  e00c              B        |L26.128|
                  |L26.102|
000066  4672              MOV      r2,lr                 ;680
000068  6302              STR      r2,[r0,#0x30]         ;680
00006a  2401              MOVS     r4,#1                 ;681
00006c  e008              B        |L26.128|
                  |L26.110|
00006e  9a03              LDR      r2,[sp,#0xc]          ;685
000070  6302              STR      r2,[r0,#0x30]         ;685
000072  2402              MOVS     r4,#2                 ;686
000074  e004              B        |L26.128|
                  |L26.118|
;;;692                }
;;;693    
;;;694                break;
;;;695    
;;;696            case UI2C_PROTSTS_NACKIF_Msk:
;;;697                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
000076  2201              MOVS     r2,#1
000078  0292              LSLS     r2,r2,#10
00007a  624a              STR      r2,[r1,#0x24]
                  |L26.124|
;;;698                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;699                u8Err = 1;
;;;700                break;
;;;701    
;;;702            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;703            default:                                                        /* Unknow status */
;;;704                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
00007c  2324              MOVS     r3,#0x24
;;;705                u8Err = 1;
00007e  2501              MOVS     r5,#1
                  |L26.128|
;;;706                break;
;;;707            }
;;;708    
;;;709            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000080  6dc7              LDR      r7,[r0,#0x5c]
000082  222e              MOVS     r2,#0x2e
000084  4397              BICS     r7,r7,r2
000086  431f              ORRS     r7,r7,r3
000088  65c7              STR      r7,[r0,#0x5c]
00008a  2e00              CMP      r6,#0                 ;663
00008c  d001              BEQ      |L26.146|
00008e  2d00              CMP      r5,#0                 ;663
000090  d0c4              BEQ      |L26.28|
                  |L26.146|
000092  4628              MOV      r0,r5                 ;663
;;;710        }
;;;711    
;;;712        return (u8Err | u8Xfering);                                             /* return (Success)/(Fail) status */
000094  4330              ORRS     r0,r0,r6
;;;713    }
000096  b004              ADD      sp,sp,#0x10
000098  bdf0              POP      {r4-r7,pc}
;;;714    
                          ENDP

00009a  0000              DCW      0x0000
                  |L26.156|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteByteTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_WriteByteTwoRegs PROC
;;;804    
;;;805    uint8_t UI2C_WriteByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t u8Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;806    {
;;;807        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2601              MOVS     r6,#1
000004  468c              MOV      r12,r1                ;806
000006  2700              MOVS     r7,#0
;;;808        uint32_t u32txLen = 0;
;;;809    
;;;810        UI2C_START(ui2c);                                                           /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  469e              MOV      lr,r3                 ;806
00000c  463d              MOV      r5,r7                 ;807
00000e  463c              MOV      r4,r7                 ;808
000010  2320              MOVS     r3,#0x20
000012  4399              BICS     r1,r1,r3
000014  2308              MOVS     r3,#8
000016  4319              ORRS     r1,r1,r3
000018  65c1              STR      r1,[r0,#0x5c]
                  |L27.26|
;;;811    
;;;812        while (u8Xfering && (u8Err == 0))
;;;813        {
;;;814            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L27.26|
;;;815    
;;;816            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000022  6e41              LDR      r1,[r0,#0x64]
000024  233f              MOVS     r3,#0x3f
000026  021b              LSLS     r3,r3,#8
000028  4019              ANDS     r1,r1,r3
00002a  39ff              SUBS     r1,r1,#0xff
00002c  1e49              SUBS     r1,r1,#1
00002e  d014              BEQ      |L27.90|
000030  2303              MOVS     r3,#3
000032  021b              LSLS     r3,r3,#8
000034  1ac9              SUBS     r1,r1,r3
000036  d025              BEQ      |L27.132|
000038  2307              MOVS     r3,#7
00003a  029b              LSLS     r3,r3,#10
00003c  4299              CMP      r1,r3
00003e  d125              BNE      |L27.140|
;;;817            {
;;;818            case UI2C_PROTSTS_STARIF_Msk:
;;;819                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);         /* Clear START INT Flag */
;;;820                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);                 /* Write SLA+W to Register UI2C_TXDAT */
;;;821                u8Ctrl = UI2C_CTL_PTRG;                                         /* Clear SI */
;;;822                break;
;;;823    
;;;824            case UI2C_PROTSTS_ACKIF_Msk:
;;;825                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);          /* Clear ACK INT Flag */
000040  2301              MOVS     r3,#1
000042  4919              LDR      r1,|L27.168|
000044  035b              LSLS     r3,r3,#13
000046  624b              STR      r3,[r1,#0x24]
;;;826    
;;;827                if (u32txLen == 0)
000048  2c00              CMP      r4,#0
00004a  d00f              BEQ      |L27.108|
;;;828                {
;;;829                    UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte data address to UI2C_TXDAT */
;;;830                    u32txLen++;
;;;831                }
;;;832                else if (u32txLen == 1)
00004c  2c01              CMP      r4,#1
00004e  d011              BEQ      |L27.116|
;;;833                {
;;;834                    UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));         /* Write Lo byte data address to UI2C_TXDAT */
;;;835                    u32txLen++;
;;;836                }
;;;837                else if (u32txLen == 2)
000050  2c02              CMP      r4,#2
000052  d013              BEQ      |L27.124|
;;;838                {
;;;839                    UI2C_SET_DATA(ui2c, u8Data);                                  /* Write data to UI2C_TXDAT */
;;;840                    u32txLen++;
;;;841                }
;;;842                else
;;;843                {
;;;844                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000054  2524              MOVS     r5,#0x24
;;;845                    u8Xfering = 0;
000056  2600              MOVS     r6,#0
000058  e01a              B        |L27.144|
                  |L27.90|
00005a  25ff              MOVS     r5,#0xff              ;819
00005c  4912              LDR      r1,|L27.168|
00005e  3501              ADDS     r5,#1                 ;819
000060  624d              STR      r5,[r1,#0x24]         ;819
000062  4661              MOV      r1,r12                ;820
000064  0049              LSLS     r1,r1,#1              ;820
000066  6301              STR      r1,[r0,#0x30]         ;820
000068  2520              MOVS     r5,#0x20              ;821
00006a  e011              B        |L27.144|
                  |L27.108|
00006c  0a11              LSRS     r1,r2,#8              ;829
00006e  6301              STR      r1,[r0,#0x30]         ;829
000070  2401              MOVS     r4,#1                 ;830
000072  e00d              B        |L27.144|
                  |L27.116|
000074  b2d1              UXTB     r1,r2                 ;834
000076  6301              STR      r1,[r0,#0x30]         ;834
000078  2402              MOVS     r4,#2                 ;835
00007a  e009              B        |L27.144|
                  |L27.124|
00007c  4671              MOV      r1,lr                 ;839
00007e  6301              STR      r1,[r0,#0x30]         ;839
000080  2403              MOVS     r4,#3                 ;840
000082  e005              B        |L27.144|
                  |L27.132|
;;;846                }
;;;847    
;;;848                break;
;;;849    
;;;850            case UI2C_PROTSTS_NACKIF_Msk:
;;;851                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);         /* Clear NACK INT Flag */
000084  2301              MOVS     r3,#1
000086  4908              LDR      r1,|L27.168|
000088  029b              LSLS     r3,r3,#10
00008a  624b              STR      r3,[r1,#0x24]
                  |L27.140|
;;;852                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;853                u8Err = 1;
;;;854                break;
;;;855    
;;;856            case UI2C_PROTSTS_ARBLOIF_Msk:                                      /* Arbitration Lost */
;;;857            default:                                                            /* Unknow status */
;;;858                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
00008c  2524              MOVS     r5,#0x24
;;;859                u8Err = 1;
00008e  2701              MOVS     r7,#1
                  |L27.144|
;;;860                break;
;;;861            }
;;;862    
;;;863            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                     /* Write controlbit to UI2C_CTL register */
000090  6dc1              LDR      r1,[r0,#0x5c]
000092  232e              MOVS     r3,#0x2e
000094  4399              BICS     r1,r1,r3
000096  4329              ORRS     r1,r1,r5
000098  65c1              STR      r1,[r0,#0x5c]
00009a  2e00              CMP      r6,#0                 ;812
00009c  d001              BEQ      |L27.162|
00009e  2f00              CMP      r7,#0                 ;812
0000a0  d0bb              BEQ      |L27.26|
                  |L27.162|
0000a2  4638              MOV      r0,r7                 ;812
;;;864        }
;;;865    
;;;866        return (u8Err | u8Xfering);
0000a4  4330              ORRS     r0,r0,r6
;;;867    }
0000a6  bdf0              POP      {r4-r7,pc}
;;;868    
                          ENDP

                  |L27.168|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteMultiBytes||, CODE, READONLY, ALIGN=2

                  UI2C_WriteMultiBytes PROC
;;;589    
;;;590    uint32_t UI2C_WriteMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t *pu8Data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;591    {
;;;592        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2701              MOVS     r7,#1
000004  468c              MOV      r12,r1                ;591
000006  2500              MOVS     r5,#0
;;;593        uint32_t u32txLen = 0;
;;;594    
;;;595        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;591
00000c  462b              MOV      r3,r5                 ;592
00000e  462c              MOV      r4,r5                 ;593
000010  2620              MOVS     r6,#0x20
000012  43b1              BICS     r1,r1,r6
000014  2608              MOVS     r6,#8
000016  4331              ORRS     r1,r1,r6
000018  65c1              STR      r1,[r0,#0x5c]
;;;596    
;;;597        while (u8Xfering && (u8Err == 0))
;;;598        {
;;;599            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;600    
;;;601            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;602            {
;;;603            case UI2C_PROTSTS_STARIF_Msk:
;;;604                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  491d              LDR      r1,|L28.144|
                  |L28.28|
00001c  6e46              LDR      r6,[r0,#0x64]         ;599
00001e  04b6              LSLS     r6,r6,#18             ;599
000020  0eb6              LSRS     r6,r6,#26             ;599
000022  d0fb              BEQ      |L28.28|
000024  6e46              LDR      r6,[r0,#0x64]         ;601
000026  223f              MOVS     r2,#0x3f              ;601
000028  0212              LSLS     r2,r2,#8              ;601
00002a  4016              ANDS     r6,r6,r2              ;601
00002c  3eff              SUBS     r6,r6,#0xff           ;601
00002e  1e76              SUBS     r6,r6,#1              ;601
000030  d012              BEQ      |L28.88|
000032  2203              MOVS     r2,#3                 ;601
000034  0212              LSLS     r2,r2,#8              ;601
000036  1ab6              SUBS     r6,r6,r2              ;601
000038  d019              BEQ      |L28.110|
00003a  2207              MOVS     r2,#7                 ;601
00003c  0292              LSLS     r2,r2,#10             ;601
00003e  4296              CMP      r6,r2                 ;601
000040  d118              BNE      |L28.116|
;;;605                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;606                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;607                break;
;;;608    
;;;609            case UI2C_PROTSTS_ACKIF_Msk:
;;;610                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2601              MOVS     r6,#1
000044  0376              LSLS     r6,r6,#13
000046  624e              STR      r6,[r1,#0x24]
;;;611    
;;;612                if (u32txLen < u32wLen)
000048  9e03              LDR      r6,[sp,#0xc]
00004a  42b4              CMP      r4,r6
00004c  d20c              BCS      |L28.104|
;;;613                    UI2C_SET_DATA(ui2c, pu8Data[u32txLen++]);                  /* Write data to UI2C_TXDAT */
00004e  4672              MOV      r2,lr
000050  5d16              LDRB     r6,[r2,r4]
000052  6306              STR      r6,[r0,#0x30]
000054  1c64              ADDS     r4,r4,#1
000056  e00f              B        |L28.120|
                  |L28.88|
000058  22ff              MOVS     r2,#0xff              ;604
00005a  3201              ADDS     r2,#1                 ;604
00005c  624a              STR      r2,[r1,#0x24]         ;604
00005e  4662              MOV      r2,r12                ;605
000060  0052              LSLS     r2,r2,#1              ;605
000062  6302              STR      r2,[r0,#0x30]         ;605
000064  2320              MOVS     r3,#0x20              ;606
000066  e007              B        |L28.120|
                  |L28.104|
;;;614                else
;;;615                {
;;;616                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000068  2324              MOVS     r3,#0x24
;;;617                    u8Xfering = 0;
00006a  2700              MOVS     r7,#0
00006c  e004              B        |L28.120|
                  |L28.110|
;;;618                }
;;;619    
;;;620                break;
;;;621    
;;;622            case UI2C_PROTSTS_NACKIF_Msk:
;;;623                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00006e  2201              MOVS     r2,#1
000070  0292              LSLS     r2,r2,#10
000072  624a              STR      r2,[r1,#0x24]
                  |L28.116|
;;;624                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;625                u8Err = 1;
;;;626                break;
;;;627    
;;;628            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;629            default:                                                        /* Unknow status */
;;;630                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000074  2324              MOVS     r3,#0x24
;;;631                u8Err = 1;
000076  2501              MOVS     r5,#1
                  |L28.120|
;;;632                break;
;;;633            }
;;;634    
;;;635            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000078  6dc6              LDR      r6,[r0,#0x5c]
00007a  222e              MOVS     r2,#0x2e
00007c  4396              BICS     r6,r6,r2
00007e  431e              ORRS     r6,r6,r3
000080  65c6              STR      r6,[r0,#0x5c]
000082  2f00              CMP      r7,#0                 ;597
000084  d001              BEQ      |L28.138|
000086  2d00              CMP      r5,#0                 ;597
000088  d0c8              BEQ      |L28.28|
                  |L28.138|
;;;636        }
;;;637    
;;;638        return u32txLen;                                                        /* Return bytes length that have been transmitted */
00008a  4620              MOV      r0,r4
;;;639    }
00008c  b004              ADD      sp,sp,#0x10
00008e  bdf0              POP      {r4-r7,pc}
;;;640    
                          ENDP

                  |L28.144|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteMultiBytesOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_WriteMultiBytesOneReg PROC
;;;730    
;;;731    uint32_t UI2C_WriteMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t *pu8Data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;732    {
;;;733        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2701              MOVS     r7,#1
000004  468c              MOV      r12,r1                ;732
000006  2500              MOVS     r5,#0
;;;734        uint32_t u32txLen = 0;
;;;735    
;;;736        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;732
00000c  462c              MOV      r4,r5                 ;733
00000e  462b              MOV      r3,r5                 ;734
000010  2620              MOVS     r6,#0x20
000012  43b1              BICS     r1,r1,r6
000014  2608              MOVS     r6,#8
000016  4331              ORRS     r1,r1,r6
000018  65c1              STR      r1,[r0,#0x5c]
;;;737    
;;;738        while (u8Xfering && (u8Err == 0))
;;;739        {
;;;740            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;741    
;;;742            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;743            {
;;;744            case UI2C_PROTSTS_STARIF_Msk:
;;;745                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  4921              LDR      r1,|L29.160|
                  |L29.28|
00001c  6e46              LDR      r6,[r0,#0x64]         ;740
00001e  04b6              LSLS     r6,r6,#18             ;740
000020  0eb6              LSRS     r6,r6,#26             ;740
000022  d0fb              BEQ      |L29.28|
000024  6e46              LDR      r6,[r0,#0x64]         ;742
000026  223f              MOVS     r2,#0x3f              ;742
000028  0212              LSLS     r2,r2,#8              ;742
00002a  4016              ANDS     r6,r6,r2              ;742
00002c  3eff              SUBS     r6,r6,#0xff           ;742
00002e  1e76              SUBS     r6,r6,#1              ;742
000030  d015              BEQ      |L29.94|
000032  2203              MOVS     r2,#3                 ;742
000034  0212              LSLS     r2,r2,#8              ;742
000036  1ab6              SUBS     r6,r6,r2              ;742
000038  d020              BEQ      |L29.124|
00003a  2207              MOVS     r2,#7                 ;742
00003c  0292              LSLS     r2,r2,#10             ;742
00003e  4296              CMP      r6,r2                 ;742
000040  d11f              BNE      |L29.130|
;;;746                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;747                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;748                break;
;;;749    
;;;750            case UI2C_PROTSTS_ACKIF_Msk:
;;;751                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2601              MOVS     r6,#1
000044  0376              LSLS     r6,r6,#13
000046  624e              STR      r6,[r1,#0x24]
;;;752    
;;;753                if (u32txLen == 0)
000048  2b00              CMP      r3,#0
00004a  d010              BEQ      |L29.110|
;;;754                {
;;;755                    UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address to UI2C_TXDAT */
;;;756                    u32txLen++;
;;;757                }
;;;758                else
;;;759                {
;;;760                    if (u32txLen < u32wLen + 1)                             /* TX length = u32wLen + 1(u8DataAddr)*/
00004c  9e09              LDR      r6,[sp,#0x24]
00004e  1c76              ADDS     r6,r6,#1
000050  42b3              CMP      r3,r6
000052  d210              BCS      |L29.118|
;;;761                        UI2C_SET_DATA(ui2c, pu8Data[u32txLen++]);              /* Write data to UI2C_TXDAT */
000054  9e03              LDR      r6,[sp,#0xc]
000056  5cf6              LDRB     r6,[r6,r3]
000058  6306              STR      r6,[r0,#0x30]
00005a  1c5b              ADDS     r3,r3,#1
00005c  e013              B        |L29.134|
                  |L29.94|
00005e  22ff              MOVS     r2,#0xff              ;745
000060  3201              ADDS     r2,#1                 ;745
000062  624a              STR      r2,[r1,#0x24]         ;745
000064  4662              MOV      r2,r12                ;746
000066  0052              LSLS     r2,r2,#1              ;746
000068  6302              STR      r2,[r0,#0x30]         ;746
00006a  2420              MOVS     r4,#0x20              ;747
00006c  e00b              B        |L29.134|
                  |L29.110|
00006e  4672              MOV      r2,lr                 ;755
000070  6302              STR      r2,[r0,#0x30]         ;755
000072  2301              MOVS     r3,#1                 ;756
000074  e007              B        |L29.134|
                  |L29.118|
;;;762                    else
;;;763                    {
;;;764                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);            /* Clear SI and send STOP */
000076  2424              MOVS     r4,#0x24
;;;765                        u8Xfering = 0;
000078  2700              MOVS     r7,#0
00007a  e004              B        |L29.134|
                  |L29.124|
;;;766                    }
;;;767                }
;;;768    
;;;769                break;
;;;770    
;;;771            case UI2C_PROTSTS_NACKIF_Msk:
;;;772                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00007c  2201              MOVS     r2,#1
00007e  0292              LSLS     r2,r2,#10
000080  624a              STR      r2,[r1,#0x24]
                  |L29.130|
;;;773                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;774                u8Err = 1;
;;;775                break;
;;;776    
;;;777            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;778            default:                                                        /* Unknow status */
;;;779                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000082  2424              MOVS     r4,#0x24
;;;780                u8Err = 1;
000084  2501              MOVS     r5,#1
                  |L29.134|
;;;781                break;
;;;782            }
;;;783    
;;;784            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000086  6dc6              LDR      r6,[r0,#0x5c]
000088  222e              MOVS     r2,#0x2e
00008a  4396              BICS     r6,r6,r2
00008c  4326              ORRS     r6,r6,r4
00008e  65c6              STR      r6,[r0,#0x5c]
000090  2f00              CMP      r7,#0                 ;738
000092  d001              BEQ      |L29.152|
000094  2d00              CMP      r5,#0                 ;738
000096  d0c1              BEQ      |L29.28|
                  |L29.152|
;;;785        }
;;;786    
;;;787        return u32txLen;                                                        /* Return bytes length that have been transmitted */
000098  4618              MOV      r0,r3
;;;788    }
00009a  b004              ADD      sp,sp,#0x10
00009c  bdf0              POP      {r4-r7,pc}
;;;789    
                          ENDP

00009e  0000              DCW      0x0000
                  |L29.160|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteMultiBytesTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_WriteMultiBytesTwoRegs PROC
;;;884    
;;;885    uint32_t UI2C_WriteMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t *pu8Data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;886    {
;;;887        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2600              MOVS     r6,#0
000004  468e              MOV      lr,r1                 ;886
000006  2101              MOVS     r1,#1
;;;888        uint32_t u32txLen = 0;
;;;889        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;890    
;;;891        UI2C_START(ui2c);                                                           /* Send START */
000008  6dc7              LDR      r7,[r0,#0x5c]
00000a  4694              MOV      r12,r2                ;886
00000c  4634              MOV      r4,r6                 ;887
00000e  4635              MOV      r5,r6                 ;888
000010  2312              MOVS     r3,#0x12              ;889
000012  2220              MOVS     r2,#0x20
000014  4397              BICS     r7,r7,r2
000016  2208              MOVS     r2,#8
000018  4317              ORRS     r7,r7,r2
00001a  65c7              STR      r7,[r0,#0x5c]
                  |L30.28|
;;;892    
;;;893        while (u8Xfering && (u8Err == 0))
;;;894        {
;;;895            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001c  6e42              LDR      r2,[r0,#0x64]
00001e  0492              LSLS     r2,r2,#18
000020  0e92              LSRS     r2,r2,#26
000022  d0fb              BEQ      |L30.28|
;;;896    
;;;897            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000024  6e47              LDR      r7,[r0,#0x64]
000026  223f              MOVS     r2,#0x3f
000028  0212              LSLS     r2,r2,#8
00002a  4017              ANDS     r7,r7,r2
00002c  3fff              SUBS     r7,r7,#0xff
00002e  1e7f              SUBS     r7,r7,#1
000030  d017              BEQ      |L30.98|
000032  2203              MOVS     r2,#3
000034  0212              LSLS     r2,r2,#8
000036  1abf              SUBS     r7,r7,r2
000038  d02a              BEQ      |L30.144|
00003a  2207              MOVS     r2,#7
00003c  0292              LSLS     r2,r2,#10
00003e  4297              CMP      r7,r2
000040  d12a              BNE      |L30.152|
;;;898            {
;;;899            case UI2C_PROTSTS_STARIF_Msk:
;;;900                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);         /* Clear START INT Flag */
;;;901                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);                 /* Write SLA+W to Register UI2C_TXDAT */
;;;902                eEvent = MASTER_SEND_ADDRESS;
;;;903                u8Ctrl = UI2C_CTL_PTRG;                                         /* Clear SI */
;;;904                break;
;;;905    
;;;906            case UI2C_PROTSTS_ACKIF_Msk:
;;;907                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);          /* Clear ACK INT Flag */
000042  2201              MOVS     r2,#1
000044  4f1b              LDR      r7,|L30.180|
000046  0352              LSLS     r2,r2,#13
000048  627a              STR      r2,[r7,#0x24]
;;;908    
;;;909                if (eEvent == MASTER_SEND_ADDRESS)
00004a  2b0a              CMP      r3,#0xa
00004c  d013              BEQ      |L30.118|
;;;910                {
;;;911                    UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte data address to UI2C_TXDAT */
;;;912                    eEvent = MASTER_SEND_H_WR_ADDRESS;
;;;913                }
;;;914                else if (eEvent == MASTER_SEND_H_WR_ADDRESS)
00004e  2b0b              CMP      r3,#0xb
000050  d016              BEQ      |L30.128|
;;;915                {
;;;916                    UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));         /* Write Lo byte data address to UI2C_TXDAT */
;;;917                    eEvent = MASTER_SEND_L_ADDRESS;
;;;918                }
;;;919                else
;;;920                {
;;;921                    if (u32txLen < u32wLen)
000052  9a09              LDR      r2,[sp,#0x24]
000054  4295              CMP      r5,r2
000056  d218              BCS      |L30.138|
;;;922                        UI2C_SET_DATA(ui2c, pu8Data[u32txLen++]);                  /* Write data to UI2C_TXDAT */
000058  9a03              LDR      r2,[sp,#0xc]
00005a  5d52              LDRB     r2,[r2,r5]
00005c  6302              STR      r2,[r0,#0x30]
00005e  1c6d              ADDS     r5,r5,#1
000060  e01c              B        |L30.156|
                  |L30.98|
000062  23ff              MOVS     r3,#0xff              ;900
000064  4a13              LDR      r2,|L30.180|
000066  3301              ADDS     r3,#1                 ;900
000068  6253              STR      r3,[r2,#0x24]         ;900
00006a  4672              MOV      r2,lr                 ;901
00006c  0052              LSLS     r2,r2,#1              ;901
00006e  6302              STR      r2,[r0,#0x30]         ;901
000070  230a              MOVS     r3,#0xa               ;902
000072  2420              MOVS     r4,#0x20              ;903
000074  e012              B        |L30.156|
                  |L30.118|
000076  4662              MOV      r2,r12                ;911
000078  0a12              LSRS     r2,r2,#8              ;911
00007a  6302              STR      r2,[r0,#0x30]         ;911
00007c  230b              MOVS     r3,#0xb               ;912
00007e  e00d              B        |L30.156|
                  |L30.128|
000080  4662              MOV      r2,r12                ;916
000082  b2d2              UXTB     r2,r2                 ;916
000084  6302              STR      r2,[r0,#0x30]         ;916
000086  230d              MOVS     r3,#0xd               ;917
000088  e008              B        |L30.156|
                  |L30.138|
;;;923                    else
;;;924                    {
;;;925                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
00008a  2424              MOVS     r4,#0x24
;;;926                        u8Xfering = 0;
00008c  2100              MOVS     r1,#0
00008e  e005              B        |L30.156|
                  |L30.144|
;;;927                    }
;;;928                }
;;;929    
;;;930                break;
;;;931    
;;;932            case UI2C_PROTSTS_NACKIF_Msk:
;;;933                UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);         /* Clear NACK INT Flag */
000090  2401              MOVS     r4,#1
000092  4a08              LDR      r2,|L30.180|
000094  02a4              LSLS     r4,r4,#10
000096  6254              STR      r4,[r2,#0x24]
                  |L30.152|
;;;934                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;935                u8Err = 1;
;;;936                break;
;;;937    
;;;938            case UI2C_PROTSTS_ARBLOIF_Msk:                                      /* Arbitration Lost */
;;;939            default:                                                            /* Unknow status */
;;;940                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
000098  2424              MOVS     r4,#0x24
;;;941                u8Err = 1;
00009a  2601              MOVS     r6,#1
                  |L30.156|
;;;942                break;
;;;943            }
;;;944    
;;;945            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                     /* Write controlbit to UI2C_CTL register */
00009c  6dc7              LDR      r7,[r0,#0x5c]
00009e  222e              MOVS     r2,#0x2e
0000a0  4397              BICS     r7,r7,r2
0000a2  4327              ORRS     r7,r7,r4
0000a4  65c7              STR      r7,[r0,#0x5c]
0000a6  2900              CMP      r1,#0                 ;893
0000a8  d001              BEQ      |L30.174|
0000aa  2e00              CMP      r6,#0                 ;893
0000ac  d0b6              BEQ      |L30.28|
                  |L30.174|
;;;946        }
;;;947    
;;;948        return u32txLen;                                                            /* Return bytes length that have been transmitted */
0000ae  4628              MOV      r0,r5
;;;949    }
0000b0  b004              ADD      sp,sp,#0x10
0000b2  bdf0              POP      {r4-r7,pc}
;;;950    
                          ENDP

                  |L30.180|
                          DCD      0x40070040

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\usci_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usci_i2c_c_c16bae74____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_usci_i2c_c_c16bae74____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usci_i2c_c_c16bae74____REVSH|
#line 479
|__asm___10_usci_i2c_c_c16bae74____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
